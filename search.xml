<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>思无邪</title>
    <url>/articles/undefined/</url>
    <content><![CDATA[<blockquote>
<p>浩浩汤汤历史长河五千载，多少文人骚客的诗赋，多少民间流传的辞章，宛如珍珠般在华夏的阳光下闪耀。侧耳倾听，伴着历史的车轮呼啸而来的，是经典回响的声音。<a id="more"></a></p>
</blockquote>
<div align=center>

 <img src="https://s1.ax1x.com/2020/08/24/dDQygP.jpg" width = "800" height = "500" alt="图片名称" align=center />

</div>

<p>&emsp;&emsp;<strong>常思而无邪</strong></p>
<p>&emsp;&emsp;《诗经》，中国诗歌的源头。对于我们来说，也许它太久远了，久远到如果没有注释，我们将寸步难行。其实，它只是民歌，是我们普通人的歌，并没有想像中的那么疏远不可亲近。千百年来，它就如盛开在彼岸的花，即使无法摘取，也一直存活于心。只是往往在不经意间，就被我们遗落在另一个时代。</p>
<p>&emsp;&emsp;当我们用诗的清雅去寻找，用经的深邃去看待，用朝圣的虔诚去倾听，它也许是前世的前世，我们心底曾经响过的声音，我们在一起唱过的歌谣，我们前生无邪的记忆。</p>
<p>&emsp;&emsp;<strong>诗三百，一言以蔽之，曰思无邪。</strong></p>
<p>&emsp;&emsp;雎鸠，是离爱情最近的鸟；蒹葭，是离爱情最近的草。三千多年过去了，雎鸠在河畔的“关关”叫声依然如在耳畔，仿佛男子在轻声呼唤所爱女子的芳名，如此深情，却又质朴；三千多年过去了，在水一方的伊人恐早已老去，可那比玫瑰平易却更繁芜的蒹葭，早已长在了心里。千年风雨，琴瑟未调，钟鼓未敲；千年风雨，秋水汤汤，芦苇大片大片寂寞地开过。我们把自己的声音留在了前世，徒留记忆的空壳在今生辗转。为何在渡河的时候不回首眺望，采采那参差的荇菜，赏赏那凝成霜的白露。</p>
<p>&emsp;&emsp;现在的都市多了太多的躁动与不安，连爱情也少了几分期许中的美丽与浪漫。看了太多玫瑰与巧克力的故事，突然想起了雎鸠与蒹葭，那平凡得已逐渐被人淡忘的美好。何时我们的生活，能重拾那一份朴实的诗意？</p>
<p>&emsp;&emsp;《关雎》与《蒹葭》，是爱情的极致。</p>
<p>&emsp;&emsp;《诗经》，不仅仅讲述爱情，它也记录那个不安稳的年代所有的动乱。兴盛衰亡，那些浓得化不开的哀伤，在尘封已久的诗句中，读来令人唏嘘感叹。</p>
<p>&emsp;&emsp;彼黍离离。</p>
<p>&emsp;&emsp;世间最残忍的四个字莫过于“物是人非”。当年周室东迁后，一个周大夫回到故都镐京，追想往日繁盛，而今日所见，满目荒凉，不禁悲从中来。宫殿王城皆已成废墟，废墟之上是郁茂的黍苗。此后的千百年，故宫禾黍就成为亡国之思的代名词。从曹植唱《情》诗到向秀赋《思旧》，从刘禹锡的《乌衣巷》到姜夔的《扬州慢》，“黍离之悲”浸染着我们的诗文辞赋，与《诗经》血脉相承。</p>
<p>&emsp;&emsp;知我者谓我心忧，不知我者谓我何求。</p>
<p>&emsp;&emsp;这是一个清醒的人恳切直白的自问。他行迈靡靡，中心摇摇，在时光的轮回里疲惫苍老。</p>
<p>&emsp;&emsp;其实早在周朝之前，历史就给我们讲了另一个故事，一个因不肯食周粟而饿死首阳山上的故事。伯夷和叔齐在死前作了一首歌，曰：“登彼西山兮，采其薇矣。已暴易暴兮，不知其非矣……”，这是关于采薇最早的记录。</p>
<p>&emsp;&emsp;《诗经》中的《采薇》，是一首征夫思归的诗。</p>
<p>&emsp;&emsp;你听，他在唱：“采薇采薇，薇亦柔止。曰归曰归，心亦忧止。忧心烈烈，载饥载渴。我戍未定，靡使归聘。”</p>
<p>&emsp;&emsp;靡使归聘。战乱的年代，何物最为珍贵？烽火连三月，家书抵万金。岑参也写道：“马上相逢无纸笔，凭君传语报平安。”征战在外，漂泊不定，生死难料，一封家信也成奢望，于是思念插上了翅膀。</p>
<p>&emsp;&emsp;《黍离》和《采薇》，如今读来，只剩一句轻叹……</p>
<p>&emsp;&emsp;夜阑人静，当我们凭几而坐，用从容珍重的心态来品一品《诗经》，或许我们能重新溯流而上到三千年前的小洲兰沚边，找回我们前世遗落的声音。生命如河，我们怎能在遗忘中度过？</p>
<p>&emsp;&emsp;《诗经》不仅是一部经典，它更是一种信念。我们文化的河流，从来没有断过。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗经</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习总结</title>
    <url>/articles/undefined/</url>
    <content><![CDATA[<blockquote>
<p>主要介绍Git运作的基本流程以及相关常用命令</p>
</blockquote>
<a id="more"></a>
<h3 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h3><p>Git:是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br><img src="https://s1.ax1x.com/2020/08/26/dfFQBT.png" alt="artara"></p>
<h4 id="Git的名词"><a href="#Git的名词" class="headerlink" title="Git的名词"></a>Git的名词</h4><p>工作区：它持有实际文件<br>缓存区（Index）：它像个缓存区域，临时保存你的改动<br>Head：指向你最近一次提交后的结果。  </p>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>1、改动添加到缓存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line"><span class="comment"># 常用filename:.表示本级目录下的全部文件  </span></span><br></pre></td></tr></table></figure>
<p>2、改动提交到Head</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提价信息&quot;</span></span><br></pre></td></tr></table></figure>
<p>3、推送改动信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假如还没有链接远端服务器，则需要下面命令添加</span></span><br><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Git分支的进一步理解"><a href="#Git分支的进一步理解" class="headerlink" title="Git分支的进一步理解"></a>Git分支的进一步理解</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul>
<li>分支：分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="https://s1.ax1x.com/2020/08/26/dfZZ6A.png" alt="artara"></li>
<li>相关命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的分支“featuer_x”</span></span><br><span class="line">git checkout -b featuer_x</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到主分支</span></span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除新分支</span></span><br><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将本地分支推送到远端仓库</span></span><br><span class="line">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>
<h4 id="分支的更新与合并"><a href="#分支的更新与合并" class="headerlink" title="分支的更新与合并"></a>分支的更新与合并</h4></li>
<li>更新本地仓库到最新改动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master）。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure></li>
<li>合并后，冲突怎么办？—自己更改，自己合并相关文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在更改后添加</span></span><br><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure></li>
<li>查看合并后的改动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>
<h3 id="远程分支管理"><a href="#远程分支管理" class="headerlink" title="远程分支管理"></a>远程分支管理</h3></li>
<li>查看本地分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git bash</span><br></pre></td></tr></table></figure></li>
<li>查看远程分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></li>
<li>删除远程分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin:&lt;name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4></li>
<li>从服务器上拉取代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;拉取SSH&gt;</span><br></pre></td></tr></table></figure></li>
<li>初始化(不经常使用，一般克隆后就会生产.git文件)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>从远程获取最新版本到本地(不会自动merge)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<h4 id="走过的坑"><a href="#走过的坑" class="headerlink" title="走过的坑"></a>走过的坑</h4>报错类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! [rejected]   master -&gt; master (non-fast-forward)</span><br></pre></td></tr></table></figure>
分析：出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。<br>解决方案<br>1、强推<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即利用强覆盖方式用你本地的代码替代git仓库内的内容</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>
2、先把git的东西fetch到你本地然后merge后再push<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错：refusing to merge unrelated histories</span></span><br><span class="line"><span class="comment"># 解决方案如下</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
然后依次执行以下命令  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
最后执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h4 id="文件-gitignore相关命令"><a href="#文件-gitignore相关命令" class="headerlink" title="文件.gitignore相关命令"></a>文件.gitignore相关命令</h4><img src="https://s1.ax1x.com/2020/08/26/dflMWV.png" alt="artara"></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在GitHub上搭建属于自己的博客</title>
    <url>/articles/undefined/</url>
    <content><![CDATA[<blockquote>
<p>最近在学习机器学习查阅资料的时候，看到几个大佬写的博客，羡煞我也，自己也想搭建一个，过程有点艰辛，现在搭建成功后，想把搭建过程写下来，作为我的第一篇博客，没有前端和后端经验的小白也能看的懂哦！</p>
</blockquote>
<a id="more"></a>

<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个开源的静态博客框架,基于node.js开发,作者是台湾大学生tommy351。 </p>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p><a href="https://github.com/">GitHub</a>相当于程序员的知网啦，在GitHub，用户可以十分轻易地找到海量的开源代码。  </p>
<h4 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h4><p><a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages">GitHub Pages</a>可以理解为用户编写的、托管在github上的静态网页，你只需将你的改动提交到Github，就可以实现更改你的网页。</p>
<h3 id="二、搭建环境"><a href="#二、搭建环境" class="headerlink" title="二、搭建环境"></a>二、搭建环境</h3><h4 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h4><p>软件在<a href="https://nodejs.org/en/download/">官网</a>下载即可安装Node的过程很简单，基本上一路点默认就行了，文件路径想改的可以改一下。</p>
<div aliga=center>

<p> <img src="https://s1.ax1x.com/2020/08/25/dckgne.png" alt="artara"></p>
</div>

<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><a href="https://git-scm.com/download/win">Git</a>可是个好东西，代码托管、团队协作都离不开它。安装过程也并不复杂，几乎一路默认就好了，不过其中也有一些要<a href="https://zhuanlan.zhihu.com/p/140405392">注意的地方</a>，不过一直按默认安装也没有什么问题。<br><img src="https://s1.ax1x.com/2020/08/25/dckL7j.png" alt="artara"></p>
<h3 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h3><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>在电脑某一磁盘内创建一个文件夹（文件夹必须是空的，名字随便，但最好能见名知意哈，比如blog）本文用blog文件夹进行演示。</p>
<h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>进入blog文件夹，右击鼠标，选择Git Brash Here 命令，弹出命令框输入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/25/dcApcT.png" alt="artara"><br>等待Hexo进行初始化（如果过程比较久，就终止一下，然后把blog文件夹里缓存的东西删光，重新执行初始化命令）。<br><img src="https://s1.ax1x.com/2020/08/25/dcADEj.png" alt="artara"> </p>
<h4 id="启动Hexo"><a href="#启动Hexo" class="headerlink" title="启动Hexo"></a>启动Hexo</h4><p>仍是在blog文件夹下，在命令窗口输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>这时在浏览器输入：默认网址，可以在本地查看你的博文啦！ </p>
<h4 id="创建自己的博客"><a href="#创建自己的博客" class="headerlink" title="创建自己的博客"></a>创建自己的博客</h4><p>在命令窗口，输入ctrl+c,断开连接，然后输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&#x27;我的第一篇博客&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/25/dctV5q.png" alt="artara"><br>这时候，你的第一篇博客就创建成功了！它默认在‘ G:\Blog\source_posts ’位置（你的可能不同），接下来我们就可以愉快的用MarkDown编辑自己的博客啦！我们用<a href="https://code.visualstudio.com/">VScode</a>或者<a href="https://jupyterlab.readthedocs.io/en/stable/#">Jupyter</a>打开它，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 第一章</span></span><br><span class="line">    内容</span><br><span class="line"><span class="comment">## 第二章</span></span><br><span class="line">    内容  </span><br><span class="line"><span class="comment">## 第三章</span></span><br><span class="line">    结束语</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/25/dcJaY6.png" alt="artara"></p>
<h4 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h4><p>仍是blog文件夹的命令面板输入命令行:<br>清理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/25/dcN9F1.png" alt="artara"><br>此时刷新刚才的界面，发现内容已经传入啦！<br><img src="https://s1.ax1x.com/2020/08/25/dcYo8K.png" alt="arara"></p>
<h3 id="四、GitHub设置"><a href="#四、GitHub设置" class="headerlink" title="四、GitHub设置"></a>四、GitHub设置</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>登录<a href="https://github.com/">GitHub</a>,不用GitHub的话，你也可以自己买域名创建博客，但白嫖不爽吗？没有账号的自己创建一个。</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>新建一个仓库，仓库名必须为：[你的昵称].github.io,这个很重要。描述信息可写可不可。<br><img src="https://s1.ax1x.com/2020/08/25/dctGI1.png" alt="artara"><br><img src="https://s1.ax1x.com/2020/08/25/dctUxO.png" alt="artara"></p>
<h4 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h4><p>回到blog文件夹下的控制面板，我们点击ctrl+c,将本地服务终止，然后输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/25/dct6it.png" alt="artara"><br>这是一个插件，用它来连接Github。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在文件夹blog里，找到配置文件_config.yml，我们打开它，拉到代码最下面，进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 这里根据自己的改，把siwuxei改成你的昵称</span></span><br><span class="line">  repo: https://github.com/siwuxei/siwuxei.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="同步至远端（GitHub）"><a href="#同步至远端（GitHub）" class="headerlink" title="同步至远端（GitHub）"></a>同步至远端（GitHub）</h4><p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>期间会让你进行输入github的账号和密码，至此，网站静态部署结束啦！此时你可以访问：[你的昵称].github.io啦！</p>
<h3 id="五、Hexo主题的使用"><a href="#五、Hexo主题的使用" class="headerlink" title="五、Hexo主题的使用"></a>五、Hexo主题的使用</h3><h4 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h4><p><a href="https://hexo.io/themes/">Hexo</a>上有许多主题进行使用，我比较喜欢精简的主义的，写博客让人看的，搞些花里胡哨的不太好，个人推荐<a href="https://github.com/litten/hexo-theme-yilia">Yilia</a>和<a href="https://github.com/iissnan/hexo-theme-next">Next</a>，连接中都有教程，我这里以next举例,仍在blog文件夹里右键启动命令面板，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>国内没有梯子比较慢，请耐心等待。<br>然后，在blog文件夹下修改_config.yml文件，将theme名字改为next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>配置完成</p>
<h4 id="同步GitHub"><a href="#同步GitHub" class="headerlink" title="同步GitHub"></a>同步GitHub</h4><p>在控制面板输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>即可同步至github上面去了，但你立即登录可能还看不到效果，github进行自动配置需要时间，通常不会太久。</p>
<h3 id="六、图床"><a href="#六、图床" class="headerlink" title="六、图床"></a>六、图床</h3><p>没有写博客前我都不知道有这东西，图床重要用于在写博客时，便于插入图片（若用网上的公共图片，随时可能失效），推荐<a href="https://imgchr.com/">路过图床</a>,空间无限，但传入图片&lt;10M,基本够用，当然你如果还不满意，可以利用GitHub自己搭建一个图床。步骤如下：<br>1、添加博客图片专用Repository，如BlogImages，这样有利于维护；<br>2、发布博客前，将博客中用到的图片push到BlogImages；<br>3、从Github里获取图片地址，如何获取我想你会的；  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意将地址中的blob替换为raw，必须替换，否则无法显示图片</span></span><br><span class="line">“https://github.com/ConnorLin/BlogImages/blob/master/2016:04:02/hexo_server.png”  </span><br><span class="line">改为  </span><br><span class="line">“https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/hexo_server.png”</span><br></pre></td></tr></table></figure>
<p><strong>好啦，至此你的个人博客就搭建完了，Enjoy it！</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubPages</tag>
      </tags>
  </entry>
  <entry>
    <title>about me</title>
    <url>/articles/undefined/</url>
    <content><![CDATA[<blockquote>
<p>A Student, live in China  </p>
</blockquote>
<p>姓名：李乐乐<br>GitHub：<a href="https://github.com/siwuxei">siwuxei</a><br>Twitter：<a href="https://twitter.com/supperyface">llike</a><br>微信：Lilestudent</p>
<a id="more"></a>

<div align=center>

 <img src="https://s1.ax1x.com/2020/08/24/dsbtEj.md.png" width = "350" height = "350" alt="头像" align=center />

</div>
]]></content>
  </entry>
</search>
