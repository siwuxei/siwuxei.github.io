<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>思无邪</title>
    <url>/articles/5d43f63/</url>
    <content><![CDATA[<blockquote>
<p>浩浩汤汤历史长河五千载，多少文人骚客的诗赋，多少民间流传的辞章，宛如珍珠般在华夏的阳光下闪耀。侧耳倾听，伴着历史的车轮呼啸而来的，是经典回响的声音。<a id="more"></a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829204950.jpg" alt="摄图网_500739697_banner_竹林中国风小女孩（非企业商用）"></p>
<p><strong>常思而无邪</strong></p>
<p>《诗经》，中国诗歌的源头。对于我们来说，也许它太久远了，久远到如果没有注释，我们将寸步难行。其实，它只是民歌，是我们普通人的歌，并没有想像中的那么疏远不可亲近。千百年来，它就如盛开在彼岸的花，即使无法摘取，也一直存活于心。只是往往在不经意间，就被我们遗落在另一个时代。</p>
<p>当我们用诗的清雅去寻找，用经的深邃去看待，用朝圣的虔诚去倾听，它也许是前世的前世，我们心底曾经响过的声音，我们在一起唱过的歌谣，我们前生无邪的记忆。</p>
<p><strong>诗三百，一言以蔽之，曰思无邪。</strong></p>
<p>雎鸠，是离爱情最近的鸟；蒹葭，是离爱情最近的草。三千多年过去了，雎鸠在河畔的“关关”叫声依然如在耳畔，仿佛男子在轻声呼唤所爱女子的芳名，如此深情，却又质朴；三千多年过去了，在水一方的伊人恐早已老去，可那比玫瑰平易却更繁芜的蒹葭，早已长在了心里。千年风雨，琴瑟未调，钟鼓未敲；千年风雨，秋水汤汤，芦苇大片大片寂寞地开过。我们把自己的声音留在了前世，徒留记忆的空壳在今生辗转。为何在渡河的时候不回首眺望，采采那参差的荇菜，赏赏那凝成霜的白露。</p>
<p>现在的都市多了太多的躁动与不安，连爱情也少了几分期许中的美丽与浪漫。看了太多玫瑰与巧克力的故事，突然想起了雎鸠与蒹葭，那平凡得已逐渐被人淡忘的美好。何时我们的生活，能重拾那一份朴实的诗意？</p>
<p>《关雎》与《蒹葭》，是爱情的极致。</p>
<p>《诗经》，不仅仅讲述爱情，它也记录那个不安稳的年代所有的动乱。兴盛衰亡，那些浓得化不开的哀伤，在尘封已久的诗句中，读来令人唏嘘感叹。</p>
<p>彼黍离离。</p>
<p>世间最残忍的四个字莫过于“物是人非”。当年周室东迁后，一个周大夫回到故都镐京，追想往日繁盛，而今日所见，满目荒凉，不禁悲从中来。宫殿王城皆已成废墟，废墟之上是郁茂的黍苗。此后的千百年，故宫禾黍就成为亡国之思的代名词。从曹植唱《情》诗到向秀赋《思旧》，从刘禹锡的《乌衣巷》到姜夔的《扬州慢》，“黍离之悲”浸染着我们的诗文辞赋，与《诗经》血脉相承。</p>
<p><strong>知我者谓我心忧，不知我者谓我何求</strong>。</p>
<p>这是一个清醒的人恳切直白的自问。他行迈靡靡，中心摇摇，在时光的轮回里疲惫苍老。</p>
<p>其实早在周朝之前，历史就给我们讲了另一个故事，一个因不肯食周粟而饿死首阳山上的故事。伯夷和叔齐在死前作了一首歌，曰：“登彼西山兮，采其薇矣。已暴易暴兮，不知其非矣……”，这是关于采薇最早的记录。</p>
<p>《诗经》中的《采薇》，是一首征夫思归的诗。</p>
<p>你听，他在唱：“采薇采薇，薇亦柔止。曰归曰归，心亦忧止。忧心烈烈，载饥载渴。我戍未定，靡使归聘。”</p>
<p>靡使归聘。战乱的年代，何物最为珍贵？烽火连三月，家书抵万金。岑参也写道：“马上相逢无纸笔，凭君传语报平安。”征战在外，漂泊不定，生死难料，一封家信也成奢望，于是思念插上了翅膀。</p>
<p>《黍离》和《采薇》，如今读来，只剩一句轻叹……</p>
<p>夜阑人静，当我们凭几而坐，用从容珍重的心态来品一品《诗经》，或许我们能重新溯流而上到三千年前的小洲兰沚边，找回我们前世遗落的声音。生命如河，我们怎能在遗忘中度过？</p>
<p>《诗经》不仅是一部经典，它更是一种信念。我们文化的河流，从来没有断过。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>诗经</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow学习之线程队列与IO操作</title>
    <url>/articles/5b5ec892/</url>
    <content><![CDATA[<blockquote>
<p>tensorflow学习之线程队列与IO操作。<a id="more"></a></p>
</blockquote>
<h4 id="队列和线程"><a href="#队列和线程" class="headerlink" title="队列和线程"></a>队列和线程</h4><p>在训练样本的时候，希望读入的训练样本时有序的</p>
<ul>
<li><p>tf.FIFOQueue 先进先出队列，按顺序出队列</p>
</li>
<li><p>tf.RandomShuffleQueue 随机出队列</p>
</li>
</ul>
<h5 id="tf-FIFOQueue"><a href="#tf-FIFOQueue" class="headerlink" title="tf.FIFOQueue"></a>tf.FIFOQueue</h5><p>FIFOQueue(capacity, dtypes, name=’fifo_queue’)</p>
<ul>
<li><p>创建一个以先进先出的顺序对元素进行排队的队列</p>
</li>
<li><p>capacity：整数。可能存储在此队列中的元素数量的上限</p>
</li>
<li><p>dtypes：DType对象列表。长度dtypes必须等于每个队列元素中的张量数,dtype的类型形状，决定了后面进队列元素形状</p>
</li>
</ul>
<p>method</p>
<ul>
<li><p>dequeue(name=None)</p>
</li>
<li><p>enqueue(vals, name=None):</p>
</li>
<li><p>enqueue_many(vals, name=None):vals列表或者元组，返回一个进队列操作</p>
</li>
<li><p>size(name=None)</p>
</li>
</ul>
<p>完成一个出队列、+1、入队列操作(同步操作)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先定义队列</span></span><br><span class="line">Q=tf.FIFOQueue(<span class="number">3</span>,tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入一些数据</span></span><br><span class="line">enq_many=Q.enqueue_many([[<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>],])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义取数据的过程</span></span><br><span class="line">out_q=Q.dequeue()</span><br><span class="line">data=out_q+<span class="number">1</span></span><br><span class="line">en_q=Q.enqueue(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 初始化队列</span></span><br><span class="line">    sess.run(enq_many)</span><br><span class="line">    <span class="comment"># 处理数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        sess.run(en_q)</span><br><span class="line">    <span class="comment"># 训练数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(Q.size().eval()):</span><br><span class="line">         print(sess.run(Q.dequeue()))</span><br></pre></td></tr></table></figure>

<p>分析：当数据量很大时，入队操作从硬盘中读取数据，放入内存中，主线程需要等待入队操作完成，才能进行训练。会话里可以运行多个线程，实现异步读取。</p>
<h4 id="队列管理器"><a href="#队列管理器" class="headerlink" title="队列管理器"></a>队列管理器</h4><p>tf.train.QueueRunner(queue, enqueue_ops=None):创建一个QueueRunner</p>
<ul>
<li><p>queue：A Queue</p>
</li>
<li><p>enqueue_ops：添加线程的队列操作列表，[]*2,指定两个线程</p>
</li>
<li><p>create_threads(sess, coord=None,start=False)创建线程来运行给定会话的入队操作</p>
</li>
<li><p>start：布尔值，如果True启动线程；如果为False调用者，必须调用start()启动线程 </p>
</li>
<li><p>coord:线程协调器，后面线程管理需要用到</p>
</li>
<li><p>return：</p>
</li>
</ul>
<p><font color='orange'>通过队列管理器来实现变量加1，入队，主线程出队列的操作，观察效果？(异步操作)</font></p>
<p>分析：这时候有一个问题就是，入队自顾自的去执行，在需要的出队操作完成之后，程序没法结束。需要一个实现线程间的同步，终止其他线程。</p>
<h4 id="线程协调器"><a href="#线程协调器" class="headerlink" title="线程协调器"></a>线程协调器</h4><p>tf.train.Coordinator()：线程协调员,实现一个简单的机制来协调一组线程的终止</p>
<ul>
<li><p>request_stop() </p>
</li>
<li><p>should_stop() 检查是否要求停止</p>
</li>
<li><p>join(threads=None, stop_grace_period_secs=120) 等待线程终止</p>
</li>
<li><p>return:线程协调员实例</p>
</li>
</ul>
<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><h5 id="文件读取流程"><a href="#文件读取流程" class="headerlink" title="文件读取流程"></a>文件读取流程</h5><p><img src="https://i.loli.net/2020/09/06/JQW2CTAjvDw9nSf.png" alt="image-20200906080652974"></p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>1、文件读取API-文件队列构造</p>
<p>tf.train.string_input_producer(string_tensor,shuffle=True)：将输出字符串（例如文件名）输入到管道队列</p>
<ul>
<li><p>string_tensor 含有文件名的1阶张量</p>
</li>
<li><p>num_epochs:过几遍数据，默认无限过数据</p>
</li>
<li><p>return:具有输出字符串的队列</p>
</li>
</ul>
<p>2、文件读取API-文件阅读器•根据文件格式，选择对应的文件阅读器</p>
<p>class tf.TextLineReader：阅读文本文件逗号分隔值（CSV）格式,默认按行读取</p>
<ul>
<li>return：读取器实例</li>
</ul>
<p>tf.FixedLengthRecordReader(record_bytes)</p>
<ul>
<li><p>要读取每个记录是固定数量字节的二进制文件</p>
</li>
<li><p>record_bytes:整型，指定每次读取的字节数</p>
</li>
<li><p>return：读取器实例</p>
</li>
</ul>
<p>tf.TFRecordReader</p>
<ul>
<li>读取TfRecords文件</li>
</ul>
<p>有一个<font color='red'>共同的读取方法</font>：</p>
<p>read(file_queue)：从队列中指定数量内容，返回一个Tensors元组（key文件名字，value默认的内容(行，字节)）</p>
<p>3、文件读取API-文件内容解码器</p>
<p>由于从文件中读取的是字符串，需要函数去解析这些字符串到张量</p>
<p>tf.decode_csv(records,record_defaults=None,field_delim = None，name = None)将CSV转换为张量，与tf.TextLineReader搭配使用</p>
<ul>
<li><p>records:tensor型字符串，每个字符串是csv中的记录行</p>
</li>
<li><p>field_delim:默认分割符”,”</p>
</li>
<li><p>record_defaults:参数决定了所得张量的类型，并设置一个值在输入字符串中缺少使用默认值,如</p>
</li>
<li><p>tf.decode_raw(bytes,out_type,little_endian = None，name = None) </p>
</li>
</ul>
<p>将字节转换为一个数字向量表示，字节为一字符串类型的张量,与函数tf.FixedLengthRecordReader搭配使用，二进制读取为uint8格式</p>
<p>4、开启线程操作</p>
<p>tf.train.start_queue_runners(sess=None,coord=None)：收集所有图中的队列线程，并启动线程</p>
<ul>
<li><p>sess:所在的会话中</p>
</li>
<li><p>coord：线程协调器</p>
</li>
<li><p>return：返回所有线程队列</p>
</li>
</ul>
<p><font color='orange'>如果读取的文件为多个或者样本数量为多个，怎么去管道读取？</font></p>
<h5 id="管道读端批处理"><a href="#管道读端批处理" class="headerlink" title="管道读端批处理"></a>管道读端批处理</h5><p>tf.train.batch(tensors,batch_size,num_threads = 1,capacity = 32,name=None)：读取指定大小（个数）的张量</p>
<ul>
<li><p>tensors：可以是包含张量的列表</p>
</li>
<li><p>batch_size:从队列中读取的批处理大小</p>
</li>
<li><p>num_threads：进入队列的线程数</p>
</li>
<li><p>capacity：整数，队列中元素的最大数量</p>
</li>
<li><p>return:tensors</p>
</li>
</ul>
<p>tf.train.shuffle_batch(tensors,batch_size,capacity,min_after_dequeue, num_threads=1) </p>
<ul>
<li><p>乱序读取指定大小（个数）的张量</p>
</li>
<li><p>min_after_dequeue:留下队列里的张量个数，能够保持随机打乱</p>
</li>
</ul>
<h4 id="文件读取案例"><a href="#文件读取案例" class="headerlink" title="文件读取案例"></a>文件读取案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个队列，1000</span></span><br><span class="line">Q=tf.FIFOQueue(<span class="number">1000</span>,tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子线程要做的事情：循环，加一，放入队列</span></span><br><span class="line">var=tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"><span class="comment"># 实现自增</span></span><br><span class="line">data=tf.assign_add(var,tf.constant(<span class="number">1.0</span>))</span><br><span class="line">en_q=Q.enqueue(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义队列管理器op，定义多少个子线程，子线程该干的事情</span></span><br><span class="line">qr=tf.train.QueueRunner(Q,enqueue_ops=[en_q]*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化变量op</span></span><br><span class="line">init_op=tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    sess.run(init_op)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启线程管理器</span></span><br><span class="line">    coord=tf.train.Coordinator()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 真正开启子线程</span></span><br><span class="line">    threads=qr.create_threads(sess,coord=coord,start=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主线程，不断读取数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">        print(sess.run(Q.dequeue()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回收子线程</span></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow学习之图像的读取</title>
    <url>/articles/9c332744/</url>
    <content><![CDATA[<blockquote>
<p>tensorflow学习之图像的读取。<a id="more"></a></p>
</blockquote>
<h4 id="图像的相关知识"><a href="#图像的相关知识" class="headerlink" title="图像的相关知识"></a>图像的相关知识</h4><p>三要素：长度、宽度、通道数</p>
<p><img src="https://i.loli.net/2020/09/06/BNz49AkYQDCHMsV.png" alt="image-20200906081845766"></p>
<p>三要素与张量的关系</p>
<p>指定3-D张量：</p>
<p><img src="https://i.loli.net/2020/09/06/emTwHR3IV6i2K4o.png" alt="image-20200906082002808"></p>
<h4 id="图像基本操作"><a href="#图像基本操作" class="headerlink" title="图像基本操作"></a>图像基本操作</h4><p>目的：</p>
<p>1、增加图片数据的统一性</p>
<p>2、所有图片转换成指定大小</p>
<p>3、缩小图片数据量，防止增加开销</p>
<p>操作：缩小图片大小</p>
<p>tf.image.resize_images(images, size): 缩小图片</p>
<ul>
<li><p>images：4-D形状[batch, height, width, channels]或3-D形状的张量[height, width, channels]的图片数据</p>
</li>
<li><p>size：1-D int32张量：new_height, new_width，图像的新尺寸</p>
</li>
<li><p>返回4-D格式或者3-D格式图片</p>
</li>
</ul>
<h4 id="图片批处理案例"><a href="#图片批处理案例" class="headerlink" title="图片批处理案例"></a>图片批处理案例</h4><p>图像读取API</p>
<p>图像读取器:将文件的全部内容作为值输出的读取器，tf.WholeFileReader</p>
<ul>
<li><p>return：读取器实例</p>
</li>
<li><p>read(file_queue):输出将是一个文件名（key）和该文件的内容（值）</p>
</li>
</ul>
<p>图像解码器: tf.image.decode_jpeg(contents)</p>
<ul>
<li><p>将JPEG编码的图像解码为uint8张量</p>
</li>
<li><p>return:uint8张量，3-D形状[height, width, channels]</p>
</li>
<li><p>tf.image.decode_png(contents)</p>
</li>
<li><p>将PNG编码的图像解码为uint8或uint16张量</p>
</li>
<li><p>return:张量类型，3-D形状[height, width, channels]</p>
</li>
</ul>
<p>图片批处理案例流程</p>
<p>1、构造图片文件队列</p>
<p>2、构造图片阅读器</p>
<p>3、读取图片数据</p>
<p>4、处理图片数据</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>读取图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、找到文件放入列表</span></span><br><span class="line">file_name=os.listdir(<span class="string">&#x27;./Data/day_5/dog/&#x27;</span>)</span><br><span class="line">filelist=[os.path.join(<span class="string">&#x27;./Data/day_5/dog/&#x27;</span>,file) <span class="keyword">for</span> file <span class="keyword">in</span> file_name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、构造文件队列</span></span><br><span class="line">file_queue=tf.train.string_input_producer(filelist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造阅读器去读取文件内容（默认读取一张图片）</span></span><br><span class="line">reader=tf.WholeFileReader()</span><br><span class="line"></span><br><span class="line">key,value=reader.read(file_queue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(value)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、对读取的图片进行解码</span></span><br><span class="line">image=tf.image.decode_jpeg(value)</span><br><span class="line"><span class="comment"># print(image)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、处理图片的大小（统一大小）</span></span><br><span class="line">image_resize=tf.image.resize_images(image,[<span class="number">200</span>,<span class="number">200</span>])</span><br><span class="line"><span class="comment"># print(image_resize)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：在批处理之前要求所有数据的形状必须定义</span></span><br><span class="line">image_resize.set_shape([<span class="number">200</span>,<span class="number">200</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、进行批处理</span></span><br><span class="line">image_batch=tf.train.batch([image_resize],batch_size=<span class="number">20</span>,num_threads=<span class="number">1</span>,capacity=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启会话运行结构</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 定义一个线程协调器</span></span><br><span class="line">    coord=tf.train.Coordinator()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启读取文件的线程</span></span><br><span class="line">    threads=tf.train.start_queue_runners(sess,coord=coord)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印读取内容</span></span><br><span class="line">    print(sess.run([image_batch]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回收子线程</span></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br></pre></td></tr></table></figure>

<p>读取二进制文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造文件列表</span></span><br><span class="line">file_name=os.listdir(<span class="string">&#x27;./Data/day_5/cifar-10-batches-bin/&#x27;</span>)</span><br><span class="line">filelist=[os.path.join(<span class="string">&#x27;./Data/day_5/cifar-10-batches-bin/&#x27;</span>,file) <span class="keyword">for</span> file <span class="keyword">in</span> file_name <span class="keyword">if</span> file[<span class="number">-3</span>:]==<span class="string">&#x27;bin&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造文件队列</span></span><br><span class="line">file_queue=tf.train.string_input_producer(filelist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造阅读器</span></span><br><span class="line">reader=tf.FixedLengthRecordReader(<span class="number">3073</span>)</span><br><span class="line"></span><br><span class="line">key,value=reader.read(file_queue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码内容</span></span><br><span class="line">label_image=tf.decode_raw(value,tf.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割出图片和标签数据</span></span><br><span class="line">label=tf.cast(tf.slice(label_image,[<span class="number">0</span>],[<span class="number">1</span>]),tf.int32)</span><br><span class="line">image=tf.slice(label_image,[<span class="number">1</span>],[<span class="number">3072</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对图片格式进行改变</span></span><br><span class="line">image_reshape=tf.reshape(image,[<span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批处理</span></span><br><span class="line">image_batch,label_batch=tf.train.batch([image_reshape,label],batch_size=<span class="number">10</span>,num_threads=<span class="number">1</span>,capacity=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启会话运行结构</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 定义一个线程协调器</span></span><br><span class="line">    coord=tf.train.Coordinator()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启读取文件的线程</span></span><br><span class="line">    threads=tf.train.start_queue_runners(sess,coord=coord)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印读取内容</span></span><br><span class="line">    print(sess.run([image_batch,label_batch]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回收子线程</span></span><br><span class="line">    coord.request_stop()</span><br><span class="line">    coord.join(threads)</span><br></pre></td></tr></table></figure>

<p>将图片转化为tfrecords进行存储</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造一个tfrecords文件</span></span><br><span class="line">writer=tf.python_io.TFRecordWriter(<span class="string">&#x27;./Data/tem/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环将所有文件写入，每个样本要构造example协议</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># 取出第i个图片的特征值和目标值</span></span><br><span class="line">    image=image_batch[i].eval().tostring()</span><br><span class="line">    label=int(label_batch[i].eval()[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造一个样本的example</span></span><br><span class="line">    example=tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">        <span class="string">&#x27;image&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[image])),</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[label]))</span><br><span class="line">        &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入单独样本</span></span><br><span class="line">    writer.write(example.SerializeToString()</span><br><span class="line">    </span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow学习之神经网络基础知识</title>
    <url>/articles/e8a76fca/</url>
    <content><![CDATA[<blockquote>
<p>tensorflow学习之神经网络基础知识。<a id="more"></a></p>
</blockquote>
<h4 id="神经网络的特点"><a href="#神经网络的特点" class="headerlink" title="神经网络的特点"></a>神经网络的特点</h4><ul>
<li><p>输入向量的维度和输入神经元的个数相同</p>
</li>
<li><p>每个连接都有个权值</p>
</li>
<li><p>同一层神经元之间没有连接</p>
</li>
<li><p>由输入层，隐层，输出层组成</p>
</li>
<li><p>第N层与第N-1层的所有神经元连接，也叫全连接</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/09/06/yAlTKwY3U2QtraI.png" alt="image-20200906083546008"></p>
<h4 id="神经网络的组成"><a href="#神经网络的组成" class="headerlink" title="神经网络的组成"></a>神经网络的组成</h4><p><strong>结构（Architecture）</strong>例如，神经网络中的变量可以是神经元连接的权重</p>
<p><strong>激励函数（Activity Rule）</strong>大部分神经网络模型具有一个短时间尺度的动力学规则，来定义神经元如何根据其他神经元的活动来改变自己的激励值。</p>
<p><strong>学习规则（Learning Rule）</strong>学习规则指定了网络中的权重如何随着时间推进而调整。（<font color='red'>反向传播算法</font>）</p>
<p><img src="https://i.loli.net/2020/09/06/kblpYDmGsxTehOw.png" alt="image-20200906083851192"></p>
<h4 id="浅层人工神经网络模型"><a href="#浅层人工神经网络模型" class="headerlink" title="浅层人工神经网络模型"></a>浅层人工神经网络模型</h4><h5 id="Mnist数据集神经网络分析"><a href="#Mnist数据集神经网络分析" class="headerlink" title="Mnist数据集神经网络分析"></a>Mnist数据集神经网络分析</h5><p><img src="https://i.loli.net/2020/09/06/xjsz185mLNZonAy.png" alt="image-20200906084052536"></p>
<p><img src="https://i.loli.net/2020/09/06/IQoJwib4hrP6DMm.png" alt="image-20200906084100716"></p>
<p>one-hot编码分析</p>
<p><img src="https://i.loli.net/2020/09/06/VtyXkqIHs2mcwZJ.png" alt="image-20200906084127553"></p>
<p><img src="https://i.loli.net/2020/09/06/uzjF76gtvU5ZyOE.png" alt="image-20200906084137415"></p>
<h5 id="one-hotAPI介绍"><a href="#one-hotAPI介绍" class="headerlink" title="one-hotAPI介绍"></a>one-hotAPI介绍</h5><p><img src="https://i.loli.net/2020/09/06/L3UQeX2HWNMgYpm.png" alt="image-20200906085538745"></p>
<p>获取数据</p>
<p>from tensorflow.examples.tutorials.mnist import input_data </p>
<p>mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)</p>
<h5 id="SoftMax回归"><a href="#SoftMax回归" class="headerlink" title="SoftMax回归"></a>SoftMax回归</h5><p>公式：</p>
<p><img src="https://i.loli.net/2020/09/06/PBGS3kh2Xqc6VKO.png" alt="image-20200906085731760"></p>
<p><img src="https://i.loli.net/2020/09/06/ZfSDvbIqxVnEatk.png" alt="image-20200906085745200"></p>
<p><img src="https://i.loli.net/2020/09/06/kn9JVYgcoTNFhRA.png" alt="image-20200906085756092"></p>
<p><img src="https://i.loli.net/2020/09/06/fWzvNkcUaqY5lFZ.png" alt="image-20200906085844132"></p>
<h5 id="全连接-从输入直接到输出"><a href="#全连接-从输入直接到输出" class="headerlink" title="全连接-从输入直接到输出"></a>全连接-从输入直接到输出</h5><p>特征加权：</p>
<ul>
<li><p>tf.matmul(a, b,name=None)+bias</p>
</li>
<li><p>return:全连接结果，供交叉损失运算</p>
</li>
<li><p>不需要激活函数（因为是最后的输出）</p>
</li>
</ul>
<p><font color='orange'>如何去衡量神经网络的损失？</font></p>
<h5 id="损失计算"><a href="#损失计算" class="headerlink" title="损失计算"></a>损失计算</h5><p>交叉熵损失公式:</p>
<p><img src="https://i.loli.net/2020/09/06/IKumeiqHYhk3ac9.png" alt="image-20200906090134458"></p>
<p>yi’ 为神经网络结果，yi为真实结果。每个类别都有一个损失结果最后需要求平均损失</p>
<h5 id="SoftMax计算、交叉熵"><a href="#SoftMax计算、交叉熵" class="headerlink" title="SoftMax计算、交叉熵"></a>SoftMax计算、交叉熵</h5><p>tf.nn.softmax_cross_entropy_with_logits(labels=None,logits=None,name=None)</p>
<p>计算logits和labels之间的交叉损失熵</p>
<ul>
<li><p>labels:标签值（真实值）</p>
</li>
<li><p>logits：样本加权之后的值</p>
</li>
<li><p>return:返回损失值列表</p>
</li>
</ul>
<p>损失值列表平均值计算：tf.reduce_mean(input_tensor)</p>
<ul>
<li>计算张量的尺寸的元素平均值</li>
</ul>
<h5 id="其他方法-损失下降API"><a href="#其他方法-损失下降API" class="headerlink" title="其他方法-损失下降API"></a>其他方法-损失下降API</h5><p>tf.train.GradientDescentOptimizer(learning_rate)：梯度下降优化</p>
<ul>
<li><p>learning_rate:学习率，一般为</p>
</li>
<li><p>minimize(loss):最小化损失</p>
</li>
<li><p>return:梯度下降op</p>
</li>
</ul>
<h5 id="准确性计算"><a href="#准确性计算" class="headerlink" title="准确性计算"></a>准确性计算</h5><p>1、equal_list = tf.equal(tf.argmax(y, 1), tf.argmax(y_label, 1))</p>
<p>2、accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))</p>
<p><img src="https://i.loli.net/2020/09/06/PcsxzvCpNlj8rXG.png" alt="image-20200906090610603"></p>
<p><img src="https://i.loli.net/2020/09/06/HX4MStV6wBqJcTj.png" alt="image-20200906090626376"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow学习之基础知识</title>
    <url>/articles/d6af5694/</url>
    <content><![CDATA[<blockquote>
<p>tensorflow学习之基础知识。<a id="more"></a></p>
</blockquote>
<h4 id="tensorflow特点"><a href="#tensorflow特点" class="headerlink" title="tensorflow特点"></a>tensorflow特点</h4><p>1、真正的可移植性</p>
<p>引入各种计算设备的支持包括CPU/GPU/TPU，以及能够很好地运行在移动端，</p>
<p>如安卓设备、ios、树莓派等等</p>
<p>2、多语言支持</p>
<p>Tensorflow 有一个合理的c++使用界面，也有一个易用的python使用界面来构建和</p>
<p>执行你的graphs，你可以直接写python/c++程序。</p>
<p>3、高度的灵活性与效率</p>
<p>TensorFlow是一个采用数据流图（data flow graphs），用于数值计算的开源软件库，能够灵活进行组装图，执行图。随着开发的进展，Tensorflow的效率不算在提高</p>
<p>4、支持<br> TensorFlow 由谷歌提供支持，谷歌投入了大量精力开发 TensorFlow，它希望 </p>
<p>TensorFlow 成为机器学习研究人员和开发人员的通用语言</p>
<h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><p>图默认已经注册，一组表示 tf.Operation计算单位的对象和tf.Tensor，表示操作之间流动的数据单元的对象</p>
<p>获取调用：</p>
<p>1、tf.get_default_graph()</p>
<p>2、op、sess或者tensor 的graph属性</p>
<h4 id="OP"><a href="#OP" class="headerlink" title="OP"></a>OP</h4><p><img src="https://i.loli.net/2020/09/06/I5wAR7xpQnD3ksg.png" alt="image-20200904122531769"></p>
<h4 id="图的创建"><a href="#图的创建" class="headerlink" title="图的创建"></a>图的创建</h4><p>tf.Graph()</p>
<p>使用新创建的图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = tf.Graph() </span><br><span class="line"><span class="keyword">with</span> g.as_default(): </span><br><span class="line">	a = tf.constant(<span class="number">1.0</span>) </span><br><span class="line">	<span class="keyword">assert</span> c.graph <span class="keyword">is</span> g</span><br></pre></td></tr></table></figure>

<h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><p>tf.Session()</p>
<p>运行TensorFlow操作图的类，使用默认注册的图（可以指定运行图）</p>
<p>会话资源</p>
<p>会话可能拥有很多资源，如 tf.Variable，tf.QueueBase和tf.ReaderBase，会话结束后需要进行资源释放</p>
<p>1、sess = tf.Session()   sess.run(…)   sess.close() </p>
<p>2、使用上下文管理器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess: </span><br><span class="line">	sess.run(...)</span><br></pre></td></tr></table></figure>

<p>3、config=tf.ConfigProto(log_device_placement=True)</p>
<ul>
<li>交互式：tf.InteractiveSession()</li>
</ul>
<h4 id="会话的run-方法"><a href="#会话的run-方法" class="headerlink" title="会话的run()方法"></a>会话的run()方法</h4><p>run(fetches, feed_dict=None,graph=None)</p>
<p>运行ops和计算tensor</p>
<ul>
<li><p>嵌套列表，元组，namedtuple，dict或OrderedDict(重载的运算符也能运行)</p>
</li>
<li><p>feed_dict 允许调用者覆盖图中指定张量的值,提供给</p>
</li>
</ul>
<p>placeholder使用</p>
<ul>
<li>返回值异常</li>
<li>RuntimeError：如果它Session处于无效状态（例如已关闭）。 </li>
<li>TypeError：如果fetches或feed_dict键是不合适的类型。</li>
<li>ValueError：如果fetches或feed_dict键无效或引用 Tensor不存在。</li>
</ul>
<h4 id="Tensorflow-Feed操作"><a href="#Tensorflow-Feed操作" class="headerlink" title="Tensorflow Feed操作"></a>Tensorflow Feed操作</h4><p>意义：在程序执行的时候,不确定输入的是什么，提前“占个坑”</p>
<p>语法：placeholder提供占位符，run时候通过feed_dict指定参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># placeholder相当于一个占位符,feed_dict是一个字典</span></span><br><span class="line"><span class="comment"># plt=tf.placeholder(tf.float32,[2,3])</span></span><br><span class="line">plt=tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">3</span>])</span><br><span class="line">print(plt)</span><br><span class="line"><span class="keyword">with</span> tf.Session(config=tf.ConfigProto(log_device_placement=<span class="literal">True</span>)) <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(plt,feed_dict=&#123;plt:[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]&#125;))</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">    print(a.shape)</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">    print(plt.shape)</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">    print(a.name)</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">    print(a.op)</span><br></pre></td></tr></table></figure>

<h4 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h4><h5 id="张量的阶和数据类型："><a href="#张量的阶和数据类型：" class="headerlink" title="张量的阶和数据类型："></a>张量的阶和数据类型：</h5><ul>
<li><p>Tensorflow基本的数据格式</p>
</li>
<li><p>一个类型化的N维度数组（tf.Tensor）</p>
</li>
<li><p>三部分，名字，形状，数据类型</p>
</li>
</ul>
<h5 id="张量的阶："><a href="#张量的阶：" class="headerlink" title="张量的阶："></a>张量的阶：</h5><p><img src="https://i.loli.net/2020/09/06/lBPskeJSAzraKQc.png" alt="image-20200906065836799"></p>
<h5 id="张量的数据类型："><a href="#张量的数据类型：" class="headerlink" title="张量的数据类型："></a>张量的数据类型：</h5><p><img src="https://i.loli.net/2020/09/06/msJrPxXpQSWj42L.png" alt="image-20200906065859997"></p>
<h5 id="张量属性："><a href="#张量属性：" class="headerlink" title="张量属性："></a>张量属性：</h5><ul>
<li><p>graph  张量所属的默认图</p>
</li>
<li><p>op 张量的操作名</p>
</li>
<li><p>name 张量的字符串描述</p>
</li>
<li><p>shape 张量形状</p>
</li>
</ul>
<h5 id="张量的动态形状与静态形状："><a href="#张量的动态形状与静态形状：" class="headerlink" title="张量的动态形状与静态形状："></a>张量的动态形状与静态形状：</h5><p>TensorFlow中，张量具有静态形状和动态形状</p>
<p><strong>静态形状</strong>：  创建一个张量或者由操作推导出一个张量时,初始状态的形状</p>
<ul>
<li><p>tf.Tensor.get_shape:获取静态形状</p>
</li>
<li><p>tf.Tensor.set_shape():更新Tensor对象的静态形状，通常用于在不能直接推断的情况下</p>
</li>
</ul>
<p><strong>动态形状</strong>：一种描述原始张量在执行过程中的一种形状</p>
<ul>
<li>tf.reshape:创建一个具有不同动态形状的新张量  </li>
</ul>
<p><strong>要点</strong>：</p>
<p>1、转换静态形状的时候，1-D到1-D，2-D到2-D，不能跨阶数改变形</p>
<p>2、 对于已经固定或者设置静态形状的张量／变量，不能再次设置静态形状</p>
<p>3、tf.reshape()动态创建新张量时，元素个数不能不匹配</p>
<h5 id="张量操作-生成张量"><a href="#张量操作-生成张量" class="headerlink" title="张量操作-生成张量"></a>张量操作-生成张量</h5><p><img src="https://i.loli.net/2020/09/06/ZxGu5I1ELYqHS4c.png" alt="image-20200906072446604"></p>
<p><img src="https://i.loli.net/2020/09/06/wnzXQs18kExo2CS.png" alt="image-20200906072521578"></p>
<p><img src="https://i.loli.net/2020/09/06/2mdQXb3CpOli9kr.png" alt="image-20200906072552195"></p>
<p><img src="https://i.loli.net/2020/09/06/bZA7k8U1TnjVeQc.png" alt="image-20200906072601916"></p>
<h5 id="提供给Tensor运算的数学函数"><a href="#提供给Tensor运算的数学函数" class="headerlink" title="提供给Tensor运算的数学函数"></a><a href="https://www.tensorflow.org/versions/r1.0/api_guides/python/math_ops">提供给Tensor运算的数学函数</a></h5><ul>
<li>算术运算符</li>
<li>基本数学函数</li>
<li>矩阵运算</li>
<li>减少维度的运算(求均值)</li>
<li>序列运算</li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量也是一种OP，是一种特殊的张量，能够进行存储持久化，<strong>它的值就是张量</strong></p>
<h5 id="变量的创建"><a href="#变量的创建" class="headerlink" title="变量的创建"></a>变量的创建</h5><p>tf.Variable(initial_value=None,name=None)</p>
<ul>
<li><p>创建一个带值initial_value的新变量</p>
</li>
<li><p>assign(value)：为变量分配一个新值，返回新值</p>
</li>
<li><p>eval(session=None：计算并返回此变量的值</p>
</li>
<li><p>name：属性表示变量名字</p>
</li>
</ul>
<h5 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h5><ul>
<li>tf.global_variables_initializer()：添加一个初始化所有变量的op，在会话中开启</li>
</ul>
<h4 id="可视化学习Tensorboard"><a href="#可视化学习Tensorboard" class="headerlink" title="可视化学习Tensorboard"></a>可视化学习Tensorboard</h4><p>数据序列化-events文件</p>
<p>TensorBoard 通过读取 TensorFlow 的事件文件来运行</p>
<ul>
<li><p>tf.summary.FileWriter(‘/tmp/tensorflow/summary/test/‘, graph=default_graph)</p>
</li>
<li><p>返回filewriter,写入事件文件到指定目录(最好用绝对路径)，以提供给tensorboard使用</p>
</li>
</ul>
<p>开启</p>
<p>tensorboard  –logdir=/tmp/tensorflow/summary/test/</p>
<p>一般浏览器打开为127.0.0.1:6006</p>
<blockquote>
<p>注：修改程序后，再保存一遍会有新的事件文件，打开默认为最新</p>
</blockquote>
<h5 id="图中的符号意义"><a href="#图中的符号意义" class="headerlink" title="图中的符号意义"></a>图中的符号意义</h5><p><img src="https://i.loli.net/2020/09/06/gjaVuCN9IAFmJP1.png" alt="image-20200906073401602"></p>
<h5 id="增加变量显示"><a href="#增加变量显示" class="headerlink" title="增加变量显示"></a>增加变量显示</h5><p>目的：观察模型的参数、损失值等变量值的变化</p>
<p>1、收集变量</p>
<ul>
<li><p>tf.summary.scalar(name=’’,tensor) 收集对于损失函数和准确率等单值变量,name为变量的名字，tensor为值</p>
</li>
<li><p>tf.summary.histogram(name=‘’,tensor) 收集高维度的变量参数</p>
</li>
<li><p>tf.summary.image(name=‘’,tensor) 收集输入的图片张量能显示图片</p>
</li>
</ul>
<p>2、合并变量写入事件文件</p>
<ul>
<li><p>merged = tf.summary.merge_all()</p>
</li>
<li><p>运行合并：summary = sess.run(merged)，每次迭代都需运行</p>
</li>
<li><p>添加：FileWriter.add_summary(summary,i),i表示第几次的值</p>
</li>
</ul>
<h4 id="案例-基于Notebook"><a href="#案例-基于Notebook" class="headerlink" title="案例(基于Notebook)"></a>案例(基于Notebook)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一张图,上下文环境</span></span><br><span class="line">g=tf.Graph()</span><br><span class="line"></span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> g.as_default():</span><br><span class="line">    c=tf.constant(<span class="number">11.0</span>)</span><br><span class="line">    print(c.graph)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现一个加法运算</span></span><br><span class="line">a=tf.constant(<span class="number">5.0</span>)</span><br><span class="line">b=tf.constant(<span class="number">6.0</span>)</span><br><span class="line">sum1=tf.add(a,b)</span><br><span class="line"></span><br><span class="line">tf.get_default_graph()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只能运行一个图结构</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(sum1))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 可以在会话中指定一张图</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=g) <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(c))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义命令行参数</span></span><br><span class="line"><span class="comment"># 第一个参数：名字，第二个参数：默认值，第三个参数：说明</span></span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">&#x27;max_step&#x27;</span>,<span class="string">&#x27;200&#x27;</span>,<span class="string">&#x27;模型训练的部数&#x27;</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">&#x27;mode_dir&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;模型加载路径&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义获取命令行参数</span></span><br><span class="line">FLAGS=tf.app.flags.FLAGS</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">    tf.InteractiveSession()</span><br><span class="line">    <span class="comment"># 准备数据 x 特征值[100,10]  y 目标值[100]</span></span><br><span class="line">    x=tf.random_normal([<span class="number">100</span>,<span class="number">1</span>],mean=<span class="number">1.75</span>,stddev=<span class="number">0.5</span>,name=<span class="string">&#x27;x_data&#x27;</span>)</span><br><span class="line">    <span class="comment"># 矩阵相乘必须是二维的</span></span><br><span class="line">    y_ture=tf.matmul(x,[[<span class="number">0.7</span>]])+<span class="number">0.8</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;model&#x27;</span>):</span><br><span class="line">    <span class="comment"># 建立线性回归模型 1个特征，1个权重，一个偏置</span></span><br><span class="line">    <span class="comment"># 随机给权重和偏置的值，进行优化,注意用变量定义才能够优化</span></span><br><span class="line">    weight=tf.Variable(tf.random_normal([<span class="number">1</span>,<span class="number">1</span>],mean=</span><br><span class="line">    <span class="number">0.0</span>,stddev=<span class="number">1.0</span>),name=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    bias=tf.Variable(<span class="number">0.0</span>,name=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    y_predict=tf.matmul(x,weight)+bias</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;loss&#x27;</span>):</span><br><span class="line">    <span class="comment"># 建立损失函数，均方根误差</span></span><br><span class="line">    loss=tf.reduce_mean(tf.square(y_ture-y_predict))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;optimizer&#x27;</span>):</span><br><span class="line">    <span class="comment"># 梯度下降优化损失</span></span><br><span class="line">    train_op=tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个保存模型的实例</span></span><br><span class="line">saver=tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集tensor</span></span><br><span class="line">tf.summary.scalar(<span class="string">&#x27;losses&#x27;</span>,loss)</span><br><span class="line">tf.summary.histogram(<span class="string">&#x27;weights&#x27;</span>,weight)</span><br><span class="line"><span class="comment"># 合并变量tensor</span></span><br><span class="line">merged=tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个初始化的Op</span></span><br><span class="line">init_op=tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过会话运行程序</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="comment"># 打印随机初始化的权重和偏置</span></span><br><span class="line">    print(<span class="string">&#x27;随机初始化的参数权重维：%f ，随机偏置为：%f&#x27;</span> % (weight.eval(),bias.eval()))</span><br><span class="line">    <span class="comment"># 建立事件文件</span></span><br><span class="line">    filewriter=tf.summary.FileWriter(<span class="string">&#x27;Data/tem/&#x27;</span>,graph=sess.graph)</span><br><span class="line">    <span class="comment"># 加载模型，覆盖模型中当中定义的参数，从上次训练的开始</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;Data/tem/ckpt/gd/checkpoint&#x27;</span>):</span><br><span class="line">        saver.restore(sess,FLAGS.mode_dir)</span><br><span class="line">    <span class="comment"># 运行优化op 循环训练</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(FLAGS.max_step):</span><br><span class="line">        sess.run(train_op)</span><br><span class="line">        <span class="comment"># 运行合并的tensor</span></span><br><span class="line">        summary=sess.run(merged)</span><br><span class="line">        <span class="comment"># 写入</span></span><br><span class="line">        filewriter.add_summary(summary,i)</span><br><span class="line">        print(<span class="string">&#x27;第%d次优化的参数权重为：%f ，偏置为：%f&#x27;</span> % (i,weight.eval(),bias.eval()))</span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    saver.save(sess,<span class="string">&#x27;Data/tem/ckpt/gd&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之k-means算法</title>
    <url>/articles/d5f776c8/</url>
    <content><![CDATA[<blockquote>
<p>sklearn学习之k-means算法。<a id="more"></a></p>
</blockquote>
<h4 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h4><p>特点：物以类聚，人以群分</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200903023728.png" alt="image-20200903023728577"></p>
<h4 id="k-means步骤"><a href="#k-means步骤" class="headerlink" title="k-means步骤"></a>k-means步骤</h4><p>1、<font color='orange'>随机</font>设置K个特征空间内的点作为初始的聚类中心</p>
<p>2、对于其他每个点计算到K个中心的距离，未知的点选择<font color='orange'>最近的一个聚类中心点作为标记类别</font></p>
<p>3、接着对着标记的聚类中心之后，重新计算出每个聚类的新中心点（<font color='orange'>平均值</font>）</p>
<p>4、如果计算得出的新中心点与原中心点一样，那么结束，否则重新进行第二步过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200903023948.png" alt="image-20200903023948152"></p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200903024000.png" alt="image-20200903024000591"></p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200903024009.png" alt="image-20200903024009131"></p>
<h4 id="k-means-API"><a href="#k-means-API" class="headerlink" title="k-means API"></a>k-means API</h4><p>sklearn.cluster.KMeans(<em>n_clusters=8,init=‘k-means++’</em>)</p>
<ul>
<li><p>k-means聚类</p>
</li>
<li><p>n_clusters:开始的聚类中心数量</p>
</li>
<li><p>init:初始化方法，默认为’k-means ++’</p>
</li>
<li><p>labels_:默认标记的类型，可以和真实值比较（不是值比较）</p>
</li>
</ul>
<h4 id="k-means举例"><a href="#k-means举例" class="headerlink" title="k-means举例"></a>k-means举例</h4><p>k-means对Instacart Market用户聚类</p>
<p>1、降维之后的数据</p>
<p>2、k-means聚类</p>
<p>3、聚类结果显示</p>
<h4 id="K-means性能评估指标"><a href="#K-means性能评估指标" class="headerlink" title="K-means性能评估指标"></a>K-means性能评估指标</h4><p>轮廓系数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200903024419.png" alt="image-20200903024419941"></p>
<p>对于每个点i 为已聚类数据中的样本 ，bi 为i 到其它族群的所有样本的平均距离，ai 为i 到本身簇的距离平均值，最终计算出所有的样本点的轮廓系数平均值。</p>
<p>如果sci 小于0，说明ai 的平均距离大于最近的其他簇。聚类效果不好。</p>
<p>如果sci 越大，说明ai 的平均距离小于最近的其他簇。</p>
<p>聚类效果好轮廓系数的值是介于 [-1,1] ，越趋近于1代表内聚度和分离度都相对较优。</p>
<h4 id="K-means性能评估指标API"><a href="#K-means性能评估指标API" class="headerlink" title="K-means性能评估指标API"></a>K-means性能评估指标API</h4><p>sklearn.metrics.silhouette_score(<em>X</em>, <em>labels</em>)</p>
<ul>
<li><p>计算所有样本的平均轮廓系数</p>
</li>
<li><p>X：特征值</p>
</li>
<li><p>labels：被聚类标记的目标值</p>
</li>
</ul>
<h4 id="K-means总结"><a href="#K-means总结" class="headerlink" title="K-means总结"></a>K-means总结</h4><p>特点分析：采用迭代式算法，直观易懂并且非常实用</p>
<p>缺点：容易收敛到局部最优解(多次聚类)，需要预先设定簇的数量(k-means++解决)</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> silhouette_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取四张表的数据</span></span><br><span class="line">prior = pd.read_csv(<span class="string">&quot;./data/instacart/order_products__prior.csv&quot;</span>)</span><br><span class="line">products = pd.read_csv(<span class="string">&quot;./data/instacart/products.csv&quot;</span>)</span><br><span class="line">orders = pd.read_csv(<span class="string">&quot;./data/instacart/orders.csv&quot;</span>)</span><br><span class="line">aisles = pd.read_csv(<span class="string">&quot;./data/instacart/aisles.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并四张表到一张表  （用户-物品类别）</span></span><br><span class="line">_mg = pd.merge(prior, products, on=[<span class="string">&#x27;product_id&#x27;</span>, <span class="string">&#x27;product_id&#x27;</span>])</span><br><span class="line">_mg = pd.merge(_mg, orders, on=[<span class="string">&#x27;order_id&#x27;</span>, <span class="string">&#x27;order_id&#x27;</span>])</span><br><span class="line">mt = pd.merge(_mg, aisles, on=[<span class="string">&#x27;aisle_id&#x27;</span>, <span class="string">&#x27;aisle_id&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉表（特殊的分组工具）</span></span><br><span class="line">cross = pd.crosstab(mt[<span class="string">&#x27;user_id&#x27;</span>], mt[<span class="string">&#x27;aisle&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行主成分分析</span></span><br><span class="line">pca = PCA(n_components=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">data = pca.fit_transform(cross)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把样本数量减少</span></span><br><span class="line">x = data[:<span class="number">500</span>]</span><br><span class="line">x.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设用户一共分为四个类别</span></span><br><span class="line">km = KMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">km.fit(x)</span><br><span class="line"></span><br><span class="line">predict = km.predict(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示聚类的结果</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立四个颜色的列表</span></span><br><span class="line">colored = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>]</span><br><span class="line">colr = [colored[i] <span class="keyword">for</span> i <span class="keyword">in</span> predict]</span><br><span class="line">plt.scatter(x[:, <span class="number">1</span>], x[:, <span class="number">20</span>], color=colr)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;20&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评判聚类效果，轮廓系数</span></span><br><span class="line">silhouette_score(x, predict)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之线性回归</title>
    <url>/articles/6ca58d10/</url>
    <content><![CDATA[<blockquote>
<p>回归算法之线性回归。<a id="more"></a></p>
</blockquote>
<h3 id="sklearn学习之线性回归"><a href="#sklearn学习之线性回归" class="headerlink" title="sklearn学习之线性回归"></a>sklearn学习之线性回归</h3><h4 id="普通线性回归"><a href="#普通线性回归" class="headerlink" title="普通线性回归"></a>普通线性回归</h4><p>定义：线性回归通过一个或者多个自变量与因变量之间之间进行建模的回归分析。其中特点为一个或多个称为回归系数的模型参数的线性组合</p>
<ul>
<li><p>一元线性回归：涉及到的变量只有一个</p>
</li>
<li><p>多元线性回归：涉及到的变量两个或两个以上</p>
</li>
</ul>
<h4 id="损失函数-误差大小"><a href="#损失函数-误差大小" class="headerlink" title="损失函数(误差大小)"></a>损失函数(误差大小)</h4><ul>
<li><p>yi为第i个训练样本的真实值</p>
</li>
<li><p>hw(xi)为第i个训练样本特征值组合预测函数</p>
</li>
</ul>
<p>总损失定义（最小二乘法）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901090615.png" alt="image-20200901082433866"></p>
<h4 id="最小二乘法之梯度下降-理解过程"><a href="#最小二乘法之梯度下降-理解过程" class="headerlink" title="最小二乘法之梯度下降(理解过程)"></a>最小二乘法之梯度下降(理解过程)</h4><p>我们以单变量中的w0,w1为例子：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901090948.png" alt="image-20200901090948423"></p>
<p>α为学习速率，需要手动指定</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901091105.png" alt="image-20200901091105040">表示方向</p>
<p>理解：沿着这个函数下降的方向找，最后就能找到山谷的最低点，然后</p>
<p>更新W值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901091143.png" alt="image-20200901091143202"></p>
<h4 id="sklearn线性归正规方程、梯度下降API"><a href="#sklearn线性归正规方程、梯度下降API" class="headerlink" title="sklearn线性归正规方程、梯度下降API"></a>sklearn线性归正规方程、梯度下降API</h4><p>正规方程：sklearn.linear_model.LinearRegression</p>
<p>梯度下降：sklearn.linear_model.SGDRegressor</p>
<p>1、sklearn.linear_model.LinearRegression()</p>
<p>普通最小二乘线性回归</p>
<ul>
<li>coef_：回归系数</li>
</ul>
<p>2、sklearn.linear_model.SGDRegressor( )</p>
<p>通过使用SGD最小化线性模型</p>
<ul>
<li>coef_：回归系数</li>
</ul>
<h4 id="线性回归实例"><a href="#线性回归实例" class="headerlink" title="线性回归实例"></a>线性回归实例</h4><p>1、sklearn线性回归正规方程、梯度下降API</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression,SGDRegressor,Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 波士顿房价预测</span></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">lb=load_boston()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据</span></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(lb.data,lb.target,test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行标准化</span></span><br><span class="line"><span class="comment"># 特征值和目标值都需要进行标准化处理</span></span><br><span class="line">std_x=StandardScaler()</span><br><span class="line">std_y=StandardScaler()</span><br><span class="line"></span><br><span class="line">x_train=std_x.fit_transform(x_train)</span><br><span class="line">x_test=std_x.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标值</span></span><br><span class="line"><span class="comment"># reshape(-1,1)转换为一列，-1是代表未知数据重整</span></span><br><span class="line">y_train=std_y.fit_transform(y_train.reshape(<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line">y_test=std_y.transform(y_test.reshape(<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正规方程求解预测结构</span></span><br><span class="line">lr=LinearRegression()</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line">y_lr_predict=lr.predict(x_test)</span><br><span class="line"></span><br><span class="line">y_lr_predict=std_y.inverse_transform(y_lr_predict)</span><br><span class="line">y_ture_test=std_y.inverse_transform(y_test) </span><br><span class="line"></span><br><span class="line">sgd=SGDRegressor()</span><br><span class="line">sgd.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">y_sgd_predict=std_y.inverse_transform(y_sgd_predict)</span><br><span class="line"></span><br><span class="line">x=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(y_test))]</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x,y_lr_predict,color=<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&#x27;lr&#x27;</span>)</span><br><span class="line">plt.plot(x,y_sgd_predict,color=<span class="string">&#x27;b&#x27;</span>,label=<span class="string">&#x27;sgd&#x27;</span>)</span><br><span class="line">plt.plot(x,y_ture_test,color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure>

<p>2、波士顿房价数据集分析流程</p>
<p>1、波士顿地区房价数据获取</p>
<p>2、波士顿地区房价数据分割</p>
<p>3、训练与测试数据标准化处理</p>
<p>4、使用最简单的线性回归模型LinearRegression和</p>
<p>梯度下降估计SGDRegressor对房价进行预测</p>
<h4 id="回归性能评估API"><a href="#回归性能评估API" class="headerlink" title="回归性能评估API"></a>回归性能评估API</h4><p>均方误差(Mean Squared Error(MSE) 评价机制</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901092726.png" alt="image-20200901092421309"></p>
<p>mean_squared_error(<em>y_true</em>, <em>y_pred</em>)</p>
<p>均方误差回归损失</p>
<ul>
<li><p>y_true:真实值</p>
</li>
<li><p>y_pred:预测值</p>
</li>
<li><p>return:浮点数结果</p>
</li>
</ul>
<h4 id="回归性能对比"><a href="#回归性能对比" class="headerlink" title="回归性能对比"></a>回归性能对比</h4><p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901092732.png" alt="image-20200901092534655"></p>
<p>官方建议</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901092811.png" alt="image-20200901092811474"></p>
<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>过拟合与欠拟合</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901092931.png" alt="image-20200901092931394"></p>
<p>经过训练后，知道了天鹅是有翅膀的，天鹅的嘴巴是长长的。简单的认为有这些特征的都是天鹅。因为机器学习到的天鹅特征太少了，导致区分标准太粗糙，不能准确识别出天鹅。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901092940.png" alt="image-20200901092940655"></p>
<p>机器通过这些图片来学习天鹅的特征，经过训练后，知道了天鹅是有翅膀的，天鹅的嘴巴是长长的弯曲的，天鹅的脖子是长长的有点曲度，天鹅的整个体型像一个”2”且略大于鸭子。这时候机器已经基本能区别天鹅和其他动物了。然后，很不巧已有的天鹅图片全是白天鹅的，于是机器经过学习后，会认为天鹅的羽毛都是白的，以后看到羽毛是黑的天鹅就会认为那不是天鹅。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901093018.png" alt="image-20200901093018044"></p>
<p><strong>过拟合：</strong>一个假设在训练数据上能够获得比其他假设更好的拟合， 但是在训练数据外的数据集上却不能很好地拟合数据，此时认为这个假设出现了过拟合的现象。(模型过于复杂)</p>
<p><strong>欠拟合：</strong>一个假设在训练数据上不能获得更好的拟合， 但是在训练数据外的数据集上也不能很好地拟合数据，此时认为这个假设出现了欠拟合的现象。(模型过于简单)</p>
<p>对线性模型进行训练学习会变成复杂模型</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901093101.png" alt="image-20200901093101833"></p>
<p><strong>欠拟合原因以及解决办法</strong></p>
<p> 原因：学习到数据的特征过少</p>
<p>解决办法：增加数据的特征数量</p>
<p><strong>过拟合原因以及解决办法</strong></p>
<p>原因：原始特征过多，存在一些嘈杂特征， 模型过于复杂是因为模型尝试去兼顾各个测试数据点</p>
<p>解决办法：</p>
<p>1、进行特征选择，消除关联性大的特征(很难做)</p>
<p>2、交叉验证(让所有数据都有过训练)</p>
<p>3、正则化(了解)</p>
<h4 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h4><p>作用：可以使得W的每个元素都很小，都接近于0</p>
<p>优点：越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象</p>
<h4 id="带有正则化的线性回归-Ridge"><a href="#带有正则化的线性回归-Ridge" class="headerlink" title="带有正则化的线性回归-Ridge"></a>带有正则化的线性回归-Ridge</h4><p>sklearn.linear_model.Ridge(<em>alpha=1.0</em>)</p>
<p>具有l2正则化的线性最小二乘法</p>
<ul>
<li><p>alpha:正则化力度</p>
</li>
<li><p>coef_:回归系数</p>
</li>
</ul>
<p><font color='orange'>观察正则化程度的变化，对结果的影响？</font></p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901093523.png" alt="image-20200901093523075"></p>
<p>线性回归 LinearRegression与Ridge对比</p>
<ul>
<li>岭回归：回归得到的回归系数更符合实际，更可靠。另外，能让估计参数的波动范围变小，变的更稳定。在存在病态数据偏多的研究中有较大的实用价值。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之集成学习方法-随机森林</title>
    <url>/articles/4918f98a/</url>
    <content><![CDATA[<blockquote>
<p>分类算法之集成学习方法-随机森林。<a id="more"></a></p>
</blockquote>
<h3 id="sklearn学习之集成学习方法-随机森林"><a href="#sklearn学习之集成学习方法-随机森林" class="headerlink" title="sklearn学习之集成学习方法-随机森林"></a>sklearn学习之集成学习方法-随机森林</h3><h4 id="什么是集成学习算法？"><a href="#什么是集成学习算法？" class="headerlink" title="什么是集成学习算法？"></a>什么是集成学习算法？</h4><p>集成学习通过建立几个模型组合的来解决单一预测问题。它的工作原理是生成多个分类器/模型，各自独立地学习和作出预测。这些预测最后结合成单预测，因此优于任何一个单分类的做出预测。</p>
<h4 id="什么是随机森林？"><a href="#什么是随机森林？" class="headerlink" title="什么是随机森林？"></a>什么是随机森林？</h4><p>定义：在机器学习中，<strong>随机森林</strong>是一个包含多个决策树的分类器，并且其输出的类别是由个别树输出的类别的众数而定。</p>
<p>例如：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/20200901090542.png" alt="image-20200901082951991"></p>
<p>例如, 如果你训练了5个树, 其中有4个树的结果是True, 1个数的结果是False, 那么最终结果会是True.</p>
<h4 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a><strong>学习算法</strong></h4><p>根据下列算法而建造每棵树：</p>
<p>1、用N来表示训练用例（样本）的个数，M表示特征数目。</p>
<p>2、输入特征数目m，用于确定决策树上一个节点的决策结果；其中m应远小于M。</p>
<p>3、从N个训练用例（样本）中以有放回抽样的方式，取样N次，形成一个训练集（即bootstrap取样），并用未抽到的用例（样本）作预测，评估其误差。</p>
<blockquote>
<p><strong>为什么要随机抽样训练集？</strong>　</p>
</blockquote>
<p>如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的</p>
<blockquote>
<p><strong>为什么要有放回地抽样？</strong></p>
</blockquote>
<p>如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是“有偏的”，都是绝对“片面的”（当然这样说可能不对），也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树（弱分类器）的投票表决。</p>
<h4 id="集成学习API"><a href="#集成学习API" class="headerlink" title="集成学习API"></a>集成学习API</h4><p>class sklearn.ensemble.RandomForestClassifier(n_estimators=10, criterion=’gini’,max_depth=None, <em>bootstrap=True</em>, random_state=None)</p>
<p>随机森林分类器</p>
<ul>
<li><p>n_estimators：integer，optional（default = 10） 森林里的树木数量</p>
</li>
<li><p>criteria：string，可选（default =“gini”）分割特征的测量方法</p>
</li>
<li><p>max_depth：integer或None，可选（默认=无）树的最大深度</p>
</li>
<li><p>bootstrap：boolean，optional（default = True）是否在构建树时使用放回抽样</p>
</li>
</ul>
<h4 id="随机森林的优点"><a href="#随机森林的优点" class="headerlink" title="随机森林的优点"></a>随机森林的优点</h4><p>1、在当前所有算法中，具有极好的准确率</p>
<p>2、能够有效地运行在大数据集上</p>
<p>3、能够处理具有高维特征的输入样本，而且不需要降维</p>
<p>4、能够评估各个特征在分类问题上的重要性</p>
<p>5、对于缺省值问题也能够获得很好得结果</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris, fetch_20newsgroups, load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier, export_graphviz</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decision</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    决策树对泰坦尼克号进行预测生死</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    titan = pd.read_csv(<span class="string">&quot;http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理数据，找出特征值和目标值</span></span><br><span class="line">    x = titan[[<span class="string">&#x27;pclass&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">    y = titan[<span class="string">&#x27;survived&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    print(x)</span><br><span class="line">    <span class="comment"># 缺失值处理</span></span><br><span class="line">    x[<span class="string">&#x27;age&#x27;</span>].fillna(x[<span class="string">&#x27;age&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分割数据集到训练集合测试集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行处理（特征工程）特征-》类别-》one_hot编码</span></span><br><span class="line">    dict = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    x_train = dict.fit_transform(x_train.to_dict(orient=<span class="string">&quot;records&quot;</span>))</span><br><span class="line"></span><br><span class="line">    print(dict.get_feature_names())</span><br><span class="line"></span><br><span class="line">    x_test = dict.transform(x_test.to_dict(orient=<span class="string">&quot;records&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(x_train)</span></span><br><span class="line">    <span class="comment"># 用决策树进行预测</span></span><br><span class="line">    <span class="comment"># dec = DecisionTreeClassifier()</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># dec.fit(x_train, y_train)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 预测准确率</span></span><br><span class="line">    <span class="comment"># print(&quot;预测的准确率：&quot;, dec.score(x_test, y_test))</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 导出决策树的结构</span></span><br><span class="line">    <span class="comment"># export_graphviz(dec, out_file=&quot;./tree.dot&quot;, feature_names=[&#x27;年龄&#x27;, &#x27;pclass=1st&#x27;, &#x27;pclass=2nd&#x27;, &#x27;pclass=3rd&#x27;, &#x27;女性&#x27;, &#x27;男性&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机森林进行预测 （超参数调优）</span></span><br><span class="line">    rf = RandomForestClassifier(n_jobs=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    param = &#123;<span class="string">&quot;n_estimators&quot;</span>: [<span class="number">120</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">800</span>, <span class="number">1200</span>], <span class="string">&quot;max_depth&quot;</span>: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">30</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网格搜索与交叉验证</span></span><br><span class="line">    gc = GridSearchCV(rf, param_grid=param, cv=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    gc.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;准确率：&quot;</span>, gc.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;查看选择的参数模型：&quot;</span>, gc.best_params_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之决策树</title>
    <url>/articles/eec6dfbb/</url>
    <content><![CDATA[<blockquote>
<p>分类算法之决策树。<a id="more"></a></p>
</blockquote>
<h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>决策树思想的来源非常朴素，程序设计中的条件分支结构就是if-then结构，最早的决策树就是利用这类结构分割数据的一种分类学习方法 </p>
<h4 id="认识决策树"><a href="#认识决策树" class="headerlink" title="认识决策树"></a>认识决策树</h4><p>银行贷款数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831090514.png" alt="image-20200831082950521"></p>
<p>你如何去划分是否能得到贷款？</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831090521.png" alt="image-20200831083320187"></p>
<h4 id="认识信息熵"><a href="#认识信息熵" class="headerlink" title="认识信息熵"></a>认识信息熵</h4><p>信息论的创始人，香农是密歇根大学学士，麻省理工学院博士，1948年，香农发表了划时代的论文——通信的数学原理，奠定了现代信息论的基础。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831084029.png" alt="image-20200831083652834"></p>
<p>猜谁是冠军？假设有32支球队。</p>
<p>每猜一次给一块钱，告诉我是否猜对了，那么我需要掏多少钱才能知道谁是冠军？我可以把球编上号，从1到32，然后提问：冠 军在1-16号吗？依次询问，只需要五次，就可以知道结果。</p>
<p>“谁是世界杯冠军”的信息量应该比5比特少。香农指出，它的准确信息量应该是：</p>
<p>​                                H = -(p1<em>logp1 + p2</em>logp2 + … + p32log32)</p>
<p><strong>H</strong>的专业术语称之为信息熵，单位为比特。</p>
<p>公式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831084218.png" alt="image-20200831084218349"></p>
<p>当这32支球队夺冠的几率相同时，对应的信息熵等于5比特</p>
<h4 id="决策树的划分依据之一-信息增益"><a href="#决策树的划分依据之一-信息增益" class="headerlink" title="决策树的划分依据之一-信息增益"></a>决策树的划分依据之一-信息增益</h4><p>特征A对训练数据集D的信息增益g(D,A),定义为集合D的信息熵H(D)与特征A给定条件下D的信息条件熵H(D|A)之差，即公式为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831084417.png" alt="image-20200831084417205"></p>
<p>注：信息增益表示得知特征X的信息而使得类Y的信息的不确定性减少的程度</p>
<h4 id="信息增益的计算"><a href="#信息增益的计算" class="headerlink" title="信息增益的计算"></a>信息增益的计算</h4><p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831084542.png" alt="image-20200831084542411"></p>
<p>条件熵的计算：</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831084605.png" alt="image-20200831084605334"></p>
<p>注：C_k 表示属于某个类别的样本数</p>
<h4 id="策树使用的算法"><a href="#策树使用的算法" class="headerlink" title="策树使用的算法"></a>策树使用的算法</h4><p>ID3：信息增益 最大的准则</p>
<p>C4.5：信息增益比 最大的准则</p>
<p>CART </p>
<ul>
<li><p>回归树: 平方误差 最小 </p>
</li>
<li><p>分类树: 基尼系数  最小的准则 在sklearn中可以选择划分的原则</p>
</li>
</ul>
<h4 id="sklearn决策树API"><a href="#sklearn决策树API" class="headerlink" title="sklearn决策树API"></a>sklearn决策树API</h4><p>class sklearn.tree.DecisionTreeClassifier </p>
<p>(*criterion=’<strong>gini</strong>’, <strong>max_depth</strong>=<strong>None</strong>,random_state=None)</p>
<ul>
<li><p>决策树分类器</p>
</li>
<li><p>criterion:默认是’gini’系数，也可以选择信息增益的熵’entropy’</p>
</li>
<li><p>max_depth:树的深度大小</p>
</li>
<li><p>random_state:随机数种子</p>
</li>
<li><p>method:</p>
</li>
<li><p>decision_path:返回决策树的路径</p>
</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>泰坦尼克号数据</p>
<p>在泰坦尼克号和titanic2数据帧描述泰坦尼克号上的个别乘客的生存状态。在泰坦尼克号的数据帧不包含从剧组信息，但它确实包含了乘客的一半的实际年龄。关于泰坦尼克号旅客的数据的主要来源是百科全书Titanica。这里使用的数据集是由各种研究人员开始的。其中包括许多研究人员创建的旅客名单，由Michael A.Findlay编辑。</p>
<p>我们提取的数据集中的特征是票的类别，存活，乘坐班，年龄，登陆，home.dest，房间，票，船和性别。乘坐班是指乘客班（1，2，3），是社会经济阶层的代表。其中age数据存在缺失。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris, fetch_20newsgroups, load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier, export_graphviz</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decision</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    决策树对泰坦尼克号进行预测生死</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    titan = pd.read_csv(<span class="string">&quot;http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理数据，找出特征值和目标值</span></span><br><span class="line">    x = titan[[<span class="string">&#x27;pclass&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">    y = titan[<span class="string">&#x27;survived&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    print(x)</span><br><span class="line">    <span class="comment"># 缺失值处理</span></span><br><span class="line">    x[<span class="string">&#x27;age&#x27;</span>].fillna(x[<span class="string">&#x27;age&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分割数据集到训练集合测试集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行处理（特征工程）特征-》类别-》one_hot编码</span></span><br><span class="line">    dict = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    x_train = dict.fit_transform(x_train.to_dict(orient=<span class="string">&quot;records&quot;</span>))</span><br><span class="line"></span><br><span class="line">    print(dict.get_feature_names())</span><br><span class="line"></span><br><span class="line">    x_test = dict.transform(x_test.to_dict(orient=<span class="string">&quot;records&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(x_train)</span></span><br><span class="line">    <span class="comment"># 用决策树进行预测</span></span><br><span class="line">    <span class="comment"># dec = DecisionTreeClassifier()</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># dec.fit(x_train, y_train)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 预测准确率</span></span><br><span class="line">    <span class="comment"># print(&quot;预测的准确率：&quot;, dec.score(x_test, y_test))</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # 导出决策树的结构</span></span><br><span class="line">    <span class="comment"># export_graphviz(dec, out_file=&quot;./tree.dot&quot;, feature_names=[&#x27;年龄&#x27;, &#x27;pclass=1st&#x27;, &#x27;pclass=2nd&#x27;, &#x27;pclass=3rd&#x27;, &#x27;女性&#x27;, &#x27;男性&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机森林进行预测 （超参数调优）</span></span><br><span class="line">    rf = RandomForestClassifier(n_jobs=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    param = &#123;<span class="string">&quot;n_estimators&quot;</span>: [<span class="number">120</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">800</span>, <span class="number">1200</span>], <span class="string">&quot;max_depth&quot;</span>: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">30</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网格搜索与交叉验证</span></span><br><span class="line">    gc = GridSearchCV(rf, param_grid=param, cv=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    gc.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;准确率：&quot;</span>, gc.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;查看选择的参数模型：&quot;</span>, gc.best_params_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之分类模型的评估</title>
    <url>/articles/4481af65/</url>
    <content><![CDATA[<blockquote>
<p>分类模型的评估。<a id="more"></a></p>
</blockquote>
<h4 id="一般方法：准确率"><a href="#一般方法：准确率" class="headerlink" title="一般方法：准确率"></a>一般方法：准确率</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">estimator.score()</span><br></pre></td></tr></table></figure>

<h4 id="特殊方法：混淆矩阵"><a href="#特殊方法：混淆矩阵" class="headerlink" title="特殊方法：混淆矩阵"></a>特殊方法：混淆矩阵</h4><p>在分类任务下，预测结果(Predicted Condition)与正确标记(True Condition)之间存在四种不同的组合，构成混淆矩阵(适用于多分类)</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831080231.png" alt="image-20200831080224559"></p>
<h4 id="为什么要引入混淆矩阵呢？"><a href="#为什么要引入混淆矩阵呢？" class="headerlink" title="为什么要引入混淆矩阵呢？"></a>为什么要引入混淆矩阵呢？</h4><p>是为了计算精确率(Precision)与召回率(Recall)，二者又有何区别？</p>
<p>精确率：预测结果为正例样本中真实为正例的比例（查得准）</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831080428.png"></p>
<p>•召回率：真实为正例的样本中预测结果为正例的比例（查的全，对正样本的区分能力）</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831080449.png" alt="image-20200831080449027"></p>
<h4 id="其他分类标准：F1-score（反映了模型的稳健型）"><a href="#其他分类标准：F1-score（反映了模型的稳健型）" class="headerlink" title="其他分类标准：F1-score（反映了模型的稳健型）"></a>其他分类标准：F1-score（反映了模型的稳健型）</h4><p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831080543.png" alt="image-20200831080543319"></p>
<h3 id="分类模型评估API"><a href="#分类模型评估API" class="headerlink" title="分类模型评估API"></a>分类模型评估API</h3><p><strong>sklearn.metrics.classification_report(<em>y_true</em>, <em>y_pred</em>, target_names=None)</strong></p>
<ul>
<li><p>y_true：真实目标值</p>
</li>
<li><p>y_pred：估计器预测目标值</p>
</li>
<li><p>target_names：目标类别名称</p>
</li>
<li><p>return：每个类别精确率与召回率</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之朴素贝叶斯算法</title>
    <url>/articles/9afa3f41/</url>
    <content><![CDATA[<blockquote>
<p>分类算法之朴素贝叶斯算法。<a id="more"></a></p>
</blockquote>
<h4 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h4><p>朴素贝叶斯-贝叶斯公式</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831080920.png" alt="image-20200831080919995"></p>
<p>w为给定文档的特征值(频数统计,预测文档提供)，c为文档类别</p>
<p><em>公式可以理解为：</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831081031.png" alt="image-20200831081031016"></p>
<p>其中c可以是不同类别。</p>
<p>公式分为三个部分：</p>
<ul>
<li><p>P(C)：每个文档类别的概率(某文档类别词数／总文档词数)</p>
</li>
<li><p>P(W│C)<em>：给定类别下特征（<strong>被预测文档中出现的词</strong>）的概率</em></p>
</li>
</ul>
<p>计算方法：P(F1│C)=Ni/N （训练文档中去计算）</p>
<ul>
<li><p>Ni为该F1词在C类别所有文档中出现的次数</p>
</li>
<li><p>N为所属类别C下的文档所有词出现的次数和</p>
</li>
</ul>
<p>P(F1,F2,…)   预测文档中每个词的概率 </p>
<h4 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h4><p>训练集统计结果(指定统计词频)：</p>
<table>
<thead>
<tr>
<th>特征\统计</th>
<th>科技</th>
<th>娱乐</th>
<th>汇总（求和）</th>
</tr>
</thead>
<tbody><tr>
<td>“商场”</td>
<td>9</td>
<td>51</td>
<td>60</td>
</tr>
<tr>
<td>“影院”</td>
<td>8</td>
<td>56</td>
<td>64</td>
</tr>
<tr>
<td>“支付宝”</td>
<td>20</td>
<td>15</td>
<td>35</td>
</tr>
<tr>
<td>“云计算”</td>
<td>63</td>
<td>0</td>
<td>63</td>
</tr>
<tr>
<td>汇总(求和)</td>
<td>100</td>
<td>121</td>
<td>221</td>
</tr>
</tbody></table>
<p>现有一篇被预测文档：出现了影院，支付宝，云计算，计算属于科技、娱乐的类别概率？</p>
<p>科技：P(影院,支付宝,云计算 │科技)∗P(科技)=8/100∗20/100∗63/100∗(100/221) =0.00456109</p>
<p>娱乐：P(影院,支付宝,云计算│娱乐)∗P(娱乐)=56/121∗15/121∗0/121∗(121/221)=0 </p>
<p><strong>属于某个类别为0，合适吗？</strong></p>
<h4 id="拉普拉斯平滑"><a href="#拉普拉斯平滑" class="headerlink" title="拉普拉斯平滑"></a>拉普拉斯平滑</h4><p>问题：从上面的例子我们得到娱乐概率为0，这是不合理的，如果词频列表里面</p>
<p>有很多出现次数都为0，很可能计算结果都为零</p>
<p>解决方法：<strong>拉普拉斯平滑系数</strong></p>
<p>​                                       <img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831081624.png" alt="image-20200831081624099"></p>
<p>α为指定的系数一般为1，m为训练文档中统计出的特征词个数</p>
<h4 id="sklearn朴素贝叶斯实现API"><a href="#sklearn朴素贝叶斯实现API" class="headerlink" title="sklearn朴素贝叶斯实现API"></a>sklearn朴素贝叶斯实现API</h4><p><strong>sklearn.naive_bayes.MultinomialNB</strong></p>
<p>sklearn.naive_bayes.MultinomialNB(<em>alpha = 1.0</em>)</p>
<ul>
<li><p>朴素贝叶斯分类</p>
</li>
<li><p>alpha：拉普拉斯平滑系数</p>
</li>
</ul>
<h4 id="朴素贝叶斯分类优缺点"><a href="#朴素贝叶斯分类优缺点" class="headerlink" title="朴素贝叶斯分类优缺点"></a>朴素贝叶斯分类优缺点</h4><p>优点：</p>
<ul>
<li><p>朴素贝叶斯模型发源于古典数学理论，有稳定的分类效率。</p>
</li>
<li><p>对缺失数据不太敏感，算法也比较简单，常用于文本分类。</p>
</li>
<li><p>分类准确度高，速度快</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要知道先验概率P(F1,F2,…|C)，因此在某些时候会由于假设的先验模型的原因导致预测效果不佳。</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris, fetch_20newsgroups, load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier, export_graphviz</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ef naviebayes():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    朴素贝叶斯进行文本分类</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    news = fetch_20newsgroups(subset=<span class="string">&#x27;all&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行数据分割</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(news.data, news.target, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对数据集进行特征抽取</span></span><br><span class="line">    tf = TfidfVectorizer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以训练集当中的词的列表进行每篇文章重要性统计[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br><span class="line">    x_train = tf.fit_transform(x_train)</span><br><span class="line"></span><br><span class="line">    print(tf.get_feature_names())</span><br><span class="line"></span><br><span class="line">    x_test = tf.transform(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行朴素贝叶斯算法的预测</span></span><br><span class="line">    mlt = MultinomialNB(alpha=<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    print(x_train.toarray())</span><br><span class="line"></span><br><span class="line">    mlt.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    y_predict = mlt.predict(x_test)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;预测的文章类别为：&quot;</span>, y_predict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得出准确率</span></span><br><span class="line">    print(<span class="string">&quot;准确率为：&quot;</span>, mlt.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;每个类别的精确率和召回率：&quot;</span>, classification_report(y_test, y_predict, target_names=news.target_names))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之模型的选择与调优</title>
    <url>/articles/d77c4b19/</url>
    <content><![CDATA[<blockquote>
<p>模型的选择与调优。<a id="more"></a></p>
</blockquote>
<h4 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h4><p>目的：为了让被评估的模型更加准确可信</p>
<p>过程：将拿到的数据，分为训练和验证集。以下图为例：将数据分成5份，其中一份作为验证集。然后经过5次(组)的测试，每次都更换不同的验证集。即得到5组模型的结果，取平均值作为最终结果。又称5折交叉验证。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831082358.png" alt="image-20200831082358370"></p>
<h4 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h4><p>通常情况下，有很多参数是需要手动指定的（如k-近邻算法中的K值），这种叫超参数。但是手动过程繁杂，所以需要对模型预设几种超参数组合。每组超参数都采用交叉验证来进行评估。最后选出最优参数组合建立模型。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200831082519.png" alt="image-20200831082519053"></p>
<h4 id="超参数搜索-网格搜索API"><a href="#超参数搜索-网格搜索API" class="headerlink" title="超参数搜索-网格搜索API"></a>超参数搜索-网格搜索API</h4><p>sklearn.model_selection.GridSearchCV(estimator,param_grid=None,cv=None)</p>
<p>目的：对估计器的指定参数值进行详尽搜索</p>
<ul>
<li><p>estimator：估计器对象</p>
</li>
<li><p>param_grid：估计器参数(dict){“n_neighbors”:[1,3,5]}</p>
</li>
<li><p>cv：指定几折交叉验证</p>
</li>
<li><p>fit：输入训练数据</p>
</li>
<li><p>score：准确率</p>
</li>
</ul>
<p>结果分析：</p>
<ul>
<li><p>best_score_:在交叉验证中测试的最好结果</p>
</li>
<li><p>best_estimator_：最好的参数模型</p>
</li>
<li><p>cv_results_:每次交叉验证后的测试集准确率结果和训练集准确率结果</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sklearn学习之K-近邻算法</title>
    <url>/articles/22b53add/</url>
    <content><![CDATA[<blockquote>
<p>KNN算法最早是由Cover和Hart提出的一种分类算法。<a id="more"></a></p>
</blockquote>
<h3 id="机器学习的一般流程"><a href="#机器学习的一般流程" class="headerlink" title="机器学习的一般流程"></a>机器学习的一般流程</h3><p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829114047.png" alt="image-20200829114046374"></p>
<h3 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h3><p>1、监督学习</p>
<ul>
<li><p>分类  k-近邻算法、贝叶斯分类、决策树与随机森林、逻辑回归、神经网络</p>
</li>
<li><p>回归  线性回归、岭回归</p>
</li>
<li><p>标注  隐马尔可夫模型   (不做要求)</p>
</li>
</ul>
<p>2、无监督学习</p>
<ul>
<li>聚类  k-means</li>
</ul>
<h3 id="分类算法-k近邻算法-KNN"><a href="#分类算法-k近邻算法-KNN" class="headerlink" title="分类算法-k近邻算法(KNN)"></a>分类算法-k近邻算法(KNN)</h3><p>定义：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p>
<p>计算距离公式：两个样本的距离可以通过如下公式计算，又叫欧式距离比如说，a(a1,a2,a3),b(b1,b2,b3)</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829114941.png" alt="image-20200829114941932"></p>
<p>sklearn k-近邻算法</p>
<p>APIsklearn.neighbors.KNeighborsClassifier<font color='red'>(n_neighbors</font>=5,<font color='red'>algorithm</font>=’auto’)</p>
<ul>
<li><p>n_neighbors：int,可选（默认= 5），k_neighbors查询默认使用的邻居数</p>
</li>
<li><p>algorithm：{‘auto’，‘ball_tree’，‘kd_tree’，‘brute’}，可选用于计算最近邻居的算法：‘ball_tree’将会使用 BallTree，‘kd_tree’将使用 KDTree。‘auto’将尝试根据传递给fit方法的值来决定最合适的算法。 (不同实现方式影响效率)</p>
</li>
</ul>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>1、k值取多大？有什么影响？</p>
<ul>
<li><p>k值取很小：容易受异常点影响</p>
</li>
<li><p>k值取很大：容易受最近数据太多导致比例变化 </p>
</li>
</ul>
<p>2、性能影响</p>
<ul>
<li>不适合超大数据类型</li>
</ul>
<h3 id="k-近邻算法优缺点"><a href="#k-近邻算法优缺点" class="headerlink" title="k-近邻算法优缺点"></a>k-近邻算法优缺点</h3><p>优点：</p>
<ul>
<li>简单，易于理解，易于实现，无需估计参数，无需训练</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>懒惰算法，对测试样本分类时的计算量大，内存开销大</p>
</li>
<li><p>必须指定K值，K值选择不当则分类精度不能保证</p>
</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knncls</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    K-近邻预测用户签到位置</span></span><br><span class="line"><span class="string">    :return:None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;./data/FBlocation/train.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data.head(10))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理数据</span></span><br><span class="line">    <span class="comment"># 1、缩小数据,查询数据晒讯</span></span><br><span class="line">    data = data.query(<span class="string">&quot;x &gt; 1.0 &amp;  x &lt; 1.25 &amp; y &gt; 2.5 &amp; y &lt; 2.75&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理时间的数据</span></span><br><span class="line">    time_value = pd.to_datetime(data[<span class="string">&#x27;time&#x27;</span>], unit=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(time_value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把日期格式转换成 字典格式</span></span><br><span class="line">    time_value = pd.DatetimeIndex(time_value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造一些特征</span></span><br><span class="line">    data[<span class="string">&#x27;day&#x27;</span>] = time_value.day</span><br><span class="line">    data[<span class="string">&#x27;hour&#x27;</span>] = time_value.hour</span><br><span class="line">    data[<span class="string">&#x27;weekday&#x27;</span>] = time_value.weekday</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把时间戳特征删除</span></span><br><span class="line">    data = data.drop([<span class="string">&#x27;time&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把签到数量少于n个目标位置删除</span></span><br><span class="line">    place_count = data.groupby(<span class="string">&#x27;place_id&#x27;</span>).count()</span><br><span class="line"></span><br><span class="line">    tf = place_count[place_count.row_id &gt; <span class="number">3</span>].reset_index()</span><br><span class="line"></span><br><span class="line">    data = data[data[<span class="string">&#x27;place_id&#x27;</span>].isin(tf.place_id)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取出数据当中的特征值和目标值</span></span><br><span class="line">    y = data[<span class="string">&#x27;place_id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    x = data.drop([<span class="string">&#x27;place_id&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行数据的分割训练集合测试集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 特征工程（标准化）</span></span><br><span class="line">    std = StandardScaler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对测试集和训练集的特征值进行标准化</span></span><br><span class="line">    x_train = std.fit_transform(x_train)</span><br><span class="line"></span><br><span class="line">    x_test = std.transform(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行算法流程 # 超参数</span></span><br><span class="line">    knn = KNeighborsClassifier()</span><br><span class="line"></span><br><span class="line">     <span class="comment"># fit， predict,score</span></span><br><span class="line">     knn.fit(x_train, y_train)</span><br><span class="line">    </span><br><span class="line">     <span class="comment"># 得出预测结果</span></span><br><span class="line">     y_predict = knn.predict(x_test)</span><br><span class="line">    </span><br><span class="line">     print(<span class="string">&quot;预测的目标签到位置为：&quot;</span>, y_predict)</span><br><span class="line">    </span><br><span class="line">     <span class="comment"># 得出准确率</span></span><br><span class="line">     print(<span class="string">&quot;预测的准确率:&quot;</span>, knn.score(x_test, y_test))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown写作工具推荐</title>
    <url>/articles/a9ae164/</url>
    <content><![CDATA[<blockquote>
<p>Markdown使用总结以及工具推荐。<a id="more"></a></p>
</blockquote>
<h3 id="初识Markdown"><a href="#初识Markdown" class="headerlink" title="初识Markdown"></a>初识Markdown</h3><p>在学习Jupyter的时候才知道有Markdown这个东西，当时认为其语法复杂，怎么还有人用这种东西，但…万事都逃不了真香定律，太香了!</p>
<h3 id="好用的Markdown工具推荐"><a href="#好用的Markdown工具推荐" class="headerlink" title="好用的Markdown工具推荐"></a>好用的Markdown工具推荐</h3><h4 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h4><p>1、VScode</p>
<p>VScode太强大了，其插件无所不能</p>
<p><font color='orange'>markdownlint</font>插件：是vscode上一款非常好用的 Markdown 格式检查扩展工具，它规定了许多规则并实时对文档进行检查，防止一些语法错误，同时维持文档风格的统一，使用此工具有助于形成一个良好的写作习惯和规范。但因其规则较多，写文档时很容易就出错（或不符合规则），所以需要对工具的规则有一个详细的了解，另外，有时工作要求的文档风格与markdownlint工具规定的规则并不相同，比如标题、列表的创建格式，缩进的空格数等等，这时就需要对规则进行一定的设置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010755.png" alt="image-20200828082309848"></p>
<p><font color='orange'>markdownlint</font>插件</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010755.png" alt="image-20200828082627410"></p>
<p>目录、批注、合并单元格、插入 LaTeX 公式、用纯文本绘图、运行代码、导入和导出、制作幻灯片….你说还有啥它不会？</p>
<p>2、<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829011132.png" alt="image-20200828084525027"></p>
<p>这个插件太强了，我用了它感觉效率提升了一倍，它可以将图片上传到指定的图床上，然后返回markdown链接，直接粘贴到你的文档中，就搞定啦！</p>
<p>问题来了，用什么图床比较好呢，这里有<a href="https://zhuanlan.zhihu.com/p/149282549">GitHub，Gitee，Coding，静态博客「Pages」服务横评</a>，图床的代理国内不少，但质量高又免费的…没有（白嫖失败）。但，但，但我们有<del>Github</del>（Gitee）啊，可以搭建免费图床。具体搭建过程也不太难，详细的，请参考：<a href="https://zhuanlan.zhihu.com/p/102594554">Gitee(码云)实现markdown图床</a>。</p>
<p>3、<a href="https://link.zhihu.com/?target=https://www.typora.io/">Typora</a></p>
<p>这个也不错，Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010804.png" alt="image-20200828083954808"></p>
<p>再来看看快捷键</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+L</td>
<td>选中当前行/句</td>
</tr>
<tr>
<td>Ctrl+E</td>
<td>选中当前格式文本</td>
</tr>
<tr>
<td>Ctrl + Home</td>
<td>跳转到文首</td>
</tr>
<tr>
<td>Ctrl + End</td>
<td>跳转到文末</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>替换</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>加粗</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>倾斜</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>超链接</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>下划线</td>
</tr>
<tr>
<td>Ctrl + 1</td>
<td>一级标题</td>
</tr>
<tr>
<td>Ctrl + 2</td>
<td>二级标题</td>
</tr>
<tr>
<td>Ctrl + 3</td>
<td>三级标题</td>
</tr>
<tr>
<td>Ctrl + 4</td>
<td>四级标题</td>
</tr>
<tr>
<td>Ctrl + +</td>
<td>增大标题等级</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td>减小标题等级</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>切换源代码和预览模式</td>
</tr>
<tr>
<td>Ctrl + \</td>
<td>清除格式</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>插入图片</td>
</tr>
<tr>
<td>Alt + Shift + 5</td>
<td>删除线</td>
</tr>
</tbody></table>
<p>还有很多，继续白嫖吧！</p>
<p>4、<a href="https://autohotkey.com/download/ahk-install.exe">AutoHotKey</a></p>
<p>Typoya也有不足，就是没有设置字体颜色的快捷键，AutoHotKey是一款著名的windows系统快捷键设置的软件，轻便小巧，我们可以对快捷键进行补充。</p>
<p>(1)、先安装AutoHotKey</p>
<p>(2)、打开记事本，把如下内容复制粘贴</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">; Typora</span><br><span class="line">; 快捷增加字体颜色</span><br><span class="line">; SendInput &#123;Text&#125; 解决中文输入法问题</span><br><span class="line"> </span><br><span class="line"><span class="comment">#IfWinActive ahk_exe Typora.exe</span></span><br><span class="line">&#123;</span><br><span class="line">    ; Ctrl+Alt+O 橙色</span><br><span class="line">    ^!o::addFontColor(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    ; Ctrl+Alt+R 红色</span><br><span class="line">    ^!r::addFontColor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    ; Ctrl+Alt+B 浅蓝色</span><br><span class="line">    ^!b::addFontColor(<span class="string">&quot;cornflowerblue&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">; 快捷增加字体颜色</span><br><span class="line">addFontColor(color)&#123;</span><br><span class="line">    clipboard := <span class="string">&quot;&quot;</span> ; 清空剪切板</span><br><span class="line">    Send &#123;ctrl down&#125;c&#123;ctrl up&#125; ; 复制</span><br><span class="line">    SendInput &#123;TEXT&#125;&lt;font color=<span class="string">&#x27;%color%&#x27;</span>&gt;</span><br><span class="line">    SendInput &#123;ctrl down&#125;v&#123;ctrl up&#125; ; 粘贴</span><br><span class="line">    If(clipboard = <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        SendInput &#123;TEXT&#125;&lt;/font&gt; ; Typora 在这不会自动补充</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        SendInput &#123;TEXT&#125;&lt;/ ; Typora中自动补全标签</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3)、将文件保存为ahk后缀的文件，如TyporaHotKey.ahk</p>
<p>(4)、在Typora软件里就可以使用快捷键：如按<code>Ctrl+Alt+O</code>添加橙色，Ctrl+Alt+R 红色，按<code>Ctrl+\</code>取消样式！</p>
<h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p>1、<font color='cornflowerblue'>MWeb</font>（推荐，60解锁高级版）</p>
<p>MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件，目前已支持 Mac，iPad 和 iPhone。iOS 版 MWeb 功能特点如下：</p>
<p>* 全面支持 Github Flavored Markdown 语法和常用扩展语法，如 TOC、Table、Fenced code block、LaTeX、Task lists、Footnote 等。</p>
<p>* 根据 iOS 系统的特点，自定义 Markdown 语法输入/编辑键盘。</p>
<p>* 支持粘贴插入图片，图片保存在跟文档相关联的位置，可以在编辑器中直接显示图片。</p>
<p>* 支持发布到 Wordpress、Metaweblog API 、Evernote、Blogger、Tumblr、语雀、少数派 Matrix、Ghost 和 Medium，除了 Medium 外都支持更新已发布文档。发布时会自动上传插入到文档中的图片。</p>
<p>* 有图床功能，目前已支持 imgur、七牛云、SM.MS、腾讯云 COS、又拍云、阿里云 OSS、自定义 四种图床。</p>
<p>* 支持 iCloud，Dropbox 同步。</p>
<p>* 支持 Mac 版的文档库的文档的查看，编辑和新增。</p>
<p>* 支持文档大纲，以方便快速定位文档。</p>
<p>* 支持导出为图片、PDF</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829011156.png" alt="image-20200828085512524"></p>
<p>2、<font color='cornflowerblue'>Markdown-图文并茂，高效写作</font>（68解锁高级版）</p>
<p>深色模式护眼，键盘工具条辅助，分屏预览等功能一应俱全，同时还具有以下功能：</p>
<p>• 支持iCloud Drive</p>
<p>• 支持夜间模式，以及多种主题</p>
<p>• 支持LaTeX数学公式</p>
<p>• 支持Todo-List等扩展语法</p>
<p>• 支持从其他app打开文件，以及添加外部文件夹</p>
<p>• 可开启WebDAV服务与你的电脑共享文件</p>
<p>• 快速的渲染，支持多种CSS，以及自定义样式….</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829011214.png" alt="image-20200828085836319"></p>
<p>还不错！</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p><a href="https://www.itblogcn.com/article/583.html">Typora 快捷方式给字体设置颜色</a></p>
]]></content>
      <categories>
        <category>安利</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>如何对Hexo博客进行优化</title>
    <url>/articles/7793c3e2/</url>
    <content><![CDATA[<blockquote>
<p>本文主要讲解如何对Hexo驱动下的博客网站进行优化，主要从网站加载速度、网站稳定性、网站扩散方法进行探讨。<a id="more"></a></p>
</blockquote>
<h3 id="提升网站加载速度"><a href="#提升网站加载速度" class="headerlink" title="提升网站加载速度"></a>提升网站加载速度</h3><p>由于大部分人基于GitHub进行建立博客，而GitHub的服务器不在国内，别墙的厉害，所以博客的加载速度会显得异常缓慢，如果你的Blog主页内有大量高清图片时，那速度…，等它加载完，我们火锅都吃完了。这里提供两种方案，仅供参考。</p>
<h4 id="转移博客至Gitee"><a href="#转移博客至Gitee" class="headerlink" title="转移博客至Gitee"></a>转移博客至Gitee</h4><p>Gitee服务器在国内，加载速度较GitHub快的不是一点半点，建议进行博客的转移，一劳永逸，Gitee搭建的博客较GitHub搭建的，当然也有不足之处，Gitee所提供的Gitee Pages服务不支持自动部署。这是什么概念呢？就是说之前用GitHub搭建博客，我们对博客进行修改后 hexo d 就完事了，Github会帮我们自动更新，但Gitee的免费用户不支持此项功能，需我们对其修改后进行手动更新。<img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010345.png" alt="image-20200828061556416">具体要不要进行转移看个人取舍了</p>
<h4 id="优化博客"><a href="#优化博客" class="headerlink" title="优化博客"></a>优化博客</h4><p>对于不想进行转移的，剩下的方法我们只有对博客进行优化了，我采取了对代码进行压缩的方式进行</p>
<h5 id="代码压缩策略"><a href="#代码压缩策略" class="headerlink" title="代码压缩策略"></a>代码压缩策略</h5><p>可以使用<strong>gulp</strong>进行，本文以 <a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>进行讲解，这个插件集成了对html，css，js，image的优化，合并重复代码，去除多余空格，用算法压缩图片。压缩后的博客，在加载速度上会有较大的提升。</p>
<p>插件安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>

<p>在站点的配置文件_<font color='orange'>config.yml</font>将下面代码加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件压缩</span></span><br><span class="line">html_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  ignore_error: <span class="literal">false</span></span><br><span class="line">  exclude:</span><br><span class="line"></span><br><span class="line">css_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line">js_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line">image_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  interlaced: <span class="literal">false</span></span><br><span class="line">  multipass: <span class="literal">false</span></span><br><span class="line">  optimizationLevel: 2</span><br><span class="line">  pngquant: <span class="literal">false</span></span><br><span class="line">  progressive: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展性优化"><a href="#扩展性优化" class="headerlink" title="扩展性优化"></a>扩展性优化</h3><h4 id="文章链接唯一化"><a href="#文章链接唯一化" class="headerlink" title="文章链接唯一化"></a>文章链接唯一化</h4><p>什么是文章链接唯一化呢？默认情况下，Hexo生成的超链接都是绝对链接。更改文章标题，变更文章所属分类，发布时间等都可能导致文章链接改变，不利于搜索引擎收录，也不利于分享。唯一的永久链接显然是更好的选择。</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中，找到permalink进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">permalink: articles/:abbrlink/ <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    rep: hex     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<h4 id="Hexo博客提交到百度"><a href="#Hexo博客提交到百度" class="headerlink" title="Hexo博客提交到百度"></a>Hexo博客提交到百度</h4><h5 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h5><p>站点地图即<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/sitemap/6241567?fr=aladdin">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p>
<p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>修改配置文件<font color='orange'>_config.yml</font>,追加以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p>生产与部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>此时，进入<font color='orange'>public</font>目录，你会发现里面有<font color='orange'>sitemap.xml</font>和<font color='orange'>baidusitemap.xml</font>两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p>
<h5 id="百度站长平台提交"><a href="#百度站长平台提交" class="headerlink" title="百度站长平台提交"></a>百度站长平台提交</h5><p>注册并并登录 <a href="http://zhanzhang.baidu.com/">百度站长平台</a>添加站点<img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829011650.png" alt="image-20200829011649980">站点验证<img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010502.png" alt="image-20200828071208317"></p>
<p>我们选择<font color='red'>文件验证</font>，下载验证文件到本地，放置在<font color='orange'>themes/next/source</font>目录下。执行生成和部署命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>提交即可</p>
<h5 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h5><p>为了使网站更容易被搜索引擎收录，获得更高<font color='orange'>SEO</font>，需要提供百度搜索引擎的自动推送服务。</p>
<p>插件安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>

<p>修改站点配置文件<font color='orange'>config.yml</font>，添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 5 <span class="comment">## 提交最新的五个链接</span></span><br><span class="line">  host: www.hui-wang.info <span class="comment">## 百度站长平台中注册的域名</span></span><br><span class="line">  token: your_token <span class="comment">## 准入秘钥</span></span><br><span class="line">  path: baidu_urls.txt <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>

<p>修改配置文件的<font color='orange'>url</font>值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line">url: <span class="comment">#填写你的网站url</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title.xml</span><br></pre></td></tr></table></figure>

<p>加入新的<font color='orange'>deploy</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: git <span class="comment">## 这是我原来的deployer</span></span><br><span class="line">  repo:</span><br><span class="line">  branch:</span><br><span class="line">- <span class="built_in">type</span>: baidu_url_submitter <span class="comment">## 添加这里内容即可</span></span><br></pre></td></tr></table></figure>

<h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。修改主题目录下的<code>layout/post.swig</code>文件，末尾添加自动推送代码，代码如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = document.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = window.location.protocol.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = document.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="sitemap提交"><a href="#sitemap提交" class="headerlink" title="sitemap提交"></a>sitemap提交</h5><p>在界面</p>
<p>输入<img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010528.png" alt="image-20200828072539693"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你的网站url/baidusitemap.xml</span></span><br><span class="line">https://siwuxei.gitee.io/baidusitemap.xml <span class="comment">#这是我的</span></span><br></pre></td></tr></table></figure>

<h4 id="Google站长平台提交"><a href="#Google站长平台提交" class="headerlink" title="Google站长平台提交"></a>Google站长平台提交</h4><p>登录<a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/#?modal_active=none">Google网站站长</a>，进入<code>Search Console</code>，点击<code>添加属性</code>进行站点添加</p>
<h5 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h5><p>方法与百度类似</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010627.png" alt="image-20200828073131083"></p>
<p>安装百度相同的方法验证后，会出现</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010627.png" alt="image-20200828073220488"></p>
<p>点击左侧站点地图，输入站点地图网址，确认提交。</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010647.png" alt="image-20200828073258341"></p>
<h5 id="验证站点是否进行了收录"><a href="#验证站点是否进行了收录" class="headerlink" title="验证站点是否进行了收录"></a>验证站点是否进行了收录</h5><p>点击左侧网址检查，输入网站域名下的任意网址，查看显示结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/siwuxei/image/img/120200829010659.png" alt="image-20200828073443009"></p>
<p>在Google中输入<font color='orange'>site:&lt;域名&gt;</font>查看搜索结果。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h4><p><a href="https://indexmoon.com/articles/1153730074/">Hexo基础教程(四)：功能添加与优化</a></p>
<p><a href="https://www.jianshu.com/p/f8ec422ebd52">Hexo博客提交百度和Google收录</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习总结</title>
    <url>/articles/acd4e1/</url>
    <content><![CDATA[<blockquote>
<p>主要介绍Git运作的基本流程以及相关常用命令。<a id="more"></a></p>
</blockquote>
<h3 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h3><p>Git:是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br><img src="https://s1.ax1x.com/2020/08/26/dfFQBT.png" alt="artara"></p>
<h4 id="Git的名词"><a href="#Git的名词" class="headerlink" title="Git的名词"></a>Git的名词</h4><p>工作区：它持有实际文件<br>缓存区（Index）：它像个缓存区域，临时保存你的改动<br>Head：指向你最近一次提交后的结果。  </p>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>1、改动添加到缓存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line"><span class="comment"># 常用filename:.表示本级目录下的全部文件  </span></span><br></pre></td></tr></table></figure>
<p>2、改动提交到Head</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提价信息&quot;</span></span><br></pre></td></tr></table></figure>
<p>3、推送改动信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假如还没有链接远端服务器，则需要下面命令添加</span></span><br><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Git分支的进一步理解"><a href="#Git分支的进一步理解" class="headerlink" title="Git分支的进一步理解"></a>Git分支的进一步理解</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul>
<li>分支：分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="https://s1.ax1x.com/2020/08/26/dfZZ6A.png" alt="artara"></li>
<li>相关命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的分支“featuer_x”</span></span><br><span class="line">git checkout -b featuer_x</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到主分支</span></span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除新分支</span></span><br><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将本地分支推送到远端仓库</span></span><br><span class="line">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>
<h4 id="分支的更新与合并"><a href="#分支的更新与合并" class="headerlink" title="分支的更新与合并"></a>分支的更新与合并</h4></li>
<li>更新本地仓库到最新改动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master）。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure></li>
<li>合并后，冲突怎么办？—自己更改，自己合并相关文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在更改后添加</span></span><br><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure></li>
<li>查看合并后的改动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>
<h3 id="远程分支管理"><a href="#远程分支管理" class="headerlink" title="远程分支管理"></a>远程分支管理</h3></li>
<li>查看本地分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git bash</span><br></pre></td></tr></table></figure></li>
<li>查看远程分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></li>
<li>删除远程分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin:&lt;name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4></li>
<li>从服务器上拉取代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;拉取SSH&gt;</span><br></pre></td></tr></table></figure></li>
<li>初始化(不经常使用，一般克隆后就会生产.git文件)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>从远程获取最新版本到本地(不会自动merge)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<h4 id="走过的坑"><a href="#走过的坑" class="headerlink" title="走过的坑"></a>走过的坑</h4>报错类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! [rejected]   master -&gt; master (non-fast-forward)</span><br></pre></td></tr></table></figure>
分析：出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。<br>解决方案<br>1、强推<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即利用强覆盖方式用你本地的代码替代git仓库内的内容</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>
2、先把git的东西fetch到你本地然后merge后再push<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错：refusing to merge unrelated histories</span></span><br><span class="line"><span class="comment"># 解决方案如下</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
然后依次执行以下命令  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
最后执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h4 id="文件-gitignore相关命令"><a href="#文件-gitignore相关命令" class="headerlink" title="文件.gitignore相关命令"></a>文件.gitignore相关命令</h4><img src="https://s1.ax1x.com/2020/08/26/dflMWV.png" alt="artara"></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在GitHub上搭建属于自己的博客</title>
    <url>/articles/419fe643/</url>
    <content><![CDATA[<blockquote>
<p>最近在学习机器学习查阅资料的时候，看到几个大佬写的博客，羡煞我也，自己也想搭建一个，过程有点艰辛，现在搭建成功后，想把搭建过程写下来，作为我的第一篇博客，没有前端和后端经验的小白也能看的懂哦！<a id="more"></a></p>
</blockquote>
<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个开源的静态博客框架,基于node.js开发,作者是台湾大学生tommy351。 </p>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p><a href="https://github.com/">GitHub</a>相当于程序员的知网啦，在GitHub，用户可以十分轻易地找到海量的开源代码。  </p>
<h4 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h4><p><a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages">GitHub Pages</a>可以理解为用户编写的、托管在github上的静态网页，你只需将你的改动提交到Github，就可以实现更改你的网页。</p>
<h3 id="二、搭建环境"><a href="#二、搭建环境" class="headerlink" title="二、搭建环境"></a>二、搭建环境</h3><h4 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h4><p>软件在<a href="https://nodejs.org/en/download/">官网</a>下载即可安装Node的过程很简单，基本上一路点默认就行了，文件路径想改的可以改一下。</p>
<div aliga=center>

<p> <img src="https://s1.ax1x.com/2020/08/25/dckgne.png" alt="artara"></p>
</div>

<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><a href="https://git-scm.com/download/win">Git</a>可是个好东西，代码托管、团队协作都离不开它。安装过程也并不复杂，几乎一路默认就好了，不过其中也有一些要<a href="https://zhuanlan.zhihu.com/p/140405392">注意的地方</a>，不过一直按默认安装也没有什么问题。<br><img src="https://s1.ax1x.com/2020/08/25/dckL7j.png" alt="artara"></p>
<h3 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h3><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>在电脑某一磁盘内创建一个文件夹（文件夹必须是空的，名字随便，但最好能见名知意哈，比如blog）本文用blog文件夹进行演示。</p>
<h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>进入blog文件夹，右击鼠标，选择Git Brash Here 命令，弹出命令框输入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/25/dcApcT.png" alt="artara"><br>等待Hexo进行初始化（如果过程比较久，就终止一下，然后把blog文件夹里缓存的东西删光，重新执行初始化命令）。<br><img src="https://s1.ax1x.com/2020/08/25/dcADEj.png" alt="artara"> </p>
<h4 id="启动Hexo"><a href="#启动Hexo" class="headerlink" title="启动Hexo"></a>启动Hexo</h4><p>仍是在blog文件夹下，在命令窗口输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>这时在浏览器输入：默认网址，可以在本地查看你的博文啦！ </p>
<h4 id="创建自己的博客"><a href="#创建自己的博客" class="headerlink" title="创建自己的博客"></a>创建自己的博客</h4><p>在命令窗口，输入ctrl+c,断开连接，然后输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&#x27;我的第一篇博客&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/25/dctV5q.png" alt="artara"><br>这时候，你的第一篇博客就创建成功了！它默认在‘ G:\Blog\source_posts ’位置（你的可能不同），接下来我们就可以愉快的用MarkDown编辑自己的博客啦！我们用<a href="https://code.visualstudio.com/">VScode</a>或者<a href="https://jupyterlab.readthedocs.io/en/stable/#">Jupyter</a>打开它，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 第一章</span></span><br><span class="line">    内容</span><br><span class="line"><span class="comment">## 第二章</span></span><br><span class="line">    内容  </span><br><span class="line"><span class="comment">## 第三章</span></span><br><span class="line">    结束语</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/25/dcJaY6.png" alt="artara"></p>
<h4 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h4><p>仍是blog文件夹的命令面板输入命令行:<br>清理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://s1.ax1x.com/2020/08/25/dcN9F1.png" alt="artara"><br>此时刷新刚才的界面，发现内容已经传入啦！<br><img src="https://s1.ax1x.com/2020/08/25/dcYo8K.png" alt="arara"></p>
<h3 id="四、GitHub设置"><a href="#四、GitHub设置" class="headerlink" title="四、GitHub设置"></a>四、GitHub设置</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>登录<a href="https://github.com/">GitHub</a>,不用GitHub的话，你也可以自己买域名创建博客，但白嫖不爽吗？没有账号的自己创建一个。</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>新建一个仓库，仓库名必须为：[你的昵称].github.io,这个很重要。描述信息可写可不可。<br><img src="https://s1.ax1x.com/2020/08/25/dctGI1.png" alt="artara"><br><img src="https://s1.ax1x.com/2020/08/25/dctUxO.png" alt="artara"></p>
<h4 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h4><p>回到blog文件夹下的控制面板，我们点击ctrl+c,将本地服务终止，然后输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/08/25/dct6it.png" alt="artara"><br>这是一个插件，用它来连接Github。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在文件夹blog里，找到配置文件_config.yml，我们打开它，拉到代码最下面，进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 这里根据自己的改，把siwuxei改成你的昵称</span></span><br><span class="line">  repo: https://github.com/siwuxei/siwuxei.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="同步至远端（GitHub）"><a href="#同步至远端（GitHub）" class="headerlink" title="同步至远端（GitHub）"></a>同步至远端（GitHub）</h4><p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>期间会让你进行输入github的账号和密码，至此，网站静态部署结束啦！此时你可以访问：[你的昵称].github.io啦！</p>
<h3 id="五、Hexo主题的使用"><a href="#五、Hexo主题的使用" class="headerlink" title="五、Hexo主题的使用"></a>五、Hexo主题的使用</h3><h4 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h4><p><a href="https://hexo.io/themes/">Hexo</a>上有许多主题进行使用，我比较喜欢精简的主义的，写博客让人看的，搞些花里胡哨的不太好，个人推荐<a href="https://github.com/litten/hexo-theme-yilia">Yilia</a>和<a href="https://github.com/iissnan/hexo-theme-next">Next</a>，连接中都有教程，我这里以next举例,仍在blog文件夹里右键启动命令面板，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>国内没有梯子比较慢，请耐心等待。<br>然后，在blog文件夹下修改_config.yml文件，将theme名字改为next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>配置完成</p>
<h4 id="同步GitHub"><a href="#同步GitHub" class="headerlink" title="同步GitHub"></a>同步GitHub</h4><p>在控制面板输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>即可同步至github上面去了，但你立即登录可能还看不到效果，github进行自动配置需要时间，通常不会太久。</p>
<h3 id="六、图床"><a href="#六、图床" class="headerlink" title="六、图床"></a>六、图床</h3><p>没有写博客前我都不知道有这东西，图床重要用于在写博客时，便于插入图片（若用网上的公共图片，随时可能失效），推荐<a href="https://imgchr.com/">路过图床</a>,空间无限，但传入图片&lt;10M,基本够用，当然你如果还不满意，可以利用GitHub自己搭建一个图床。步骤如下：<br>1、添加博客图片专用Repository，如BlogImages，这样有利于维护；<br>2、发布博客前，将博客中用到的图片push到BlogImages；<br>3、从Github里获取图片地址，如何获取我想你会的；  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意将地址中的blob替换为raw，必须替换，否则无法显示图片</span></span><br><span class="line">“https://github.com/ConnorLin/BlogImages/blob/master/2016:04:02/hexo_server.png”  </span><br><span class="line">改为  </span><br><span class="line">“https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/hexo_server.png”</span><br></pre></td></tr></table></figure>
<p><strong>好啦，至此你的个人博客就搭建完了，Enjoy it！</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubPages</tag>
      </tags>
  </entry>
  <entry>
    <title>about me</title>
    <url>/articles/9c4101a6/</url>
    <content><![CDATA[<blockquote>
<p>A Student, live in China  </p>
</blockquote>
<p>姓名：李乐乐<br>GitHub：<a href="https://github.com/siwuxei">siwuxei</a><br>Twitter：<a href="https://twitter.com/supperyface">llike</a><br>微信：Lilestudent</p>
<a id="more"></a>

<div align=center>

 <img src="https://s1.ax1x.com/2020/08/24/dsbtEj.md.png" width = "350" height = "350" alt="头像" align=center />

</div>
]]></content>
  </entry>
</search>
